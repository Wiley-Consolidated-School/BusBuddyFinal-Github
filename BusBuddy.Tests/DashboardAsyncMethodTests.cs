using System;using System.Reflection;using System.Windows.Forms;using BusBuddy.UI.Views;using Microsoft.VisualStudio.TestTools.UnitTesting;namespace BusBuddy.Tests.UI{    /// <summary>    /// Tests specifically for the Dashboard's async loading functionality    /// Uses the standard MSTest framework that is already set up in the project    /// </summary>    [TestClass]    public class DashboardAsyncMethodTests    {        private Dashboard _dashboard;        private class DummyServiceProvider : IServiceProvider        {            public object GetService(Type serviceType) => null;        }        [TestInitialize]        public void Setup()        {            // Set test mode environment variable to ensure we don't create real UI components            Environment.SetEnvironmentVariable("BUSBUDDY_TEST_MODE", "1");            // Create dashboard instance for testing (pass dummy IServiceProvider)            _dashboard = new Dashboard(new DummyServiceProvider());        }        [TestCleanup]        public void Cleanup()        {            // Clean up after tests            _dashboard?.Dispose();            Environment.SetEnvironmentVariable("BUSBUDDY_TEST_MODE", null);        }        [TestMethod]        public void Dashboard_FallbackLayout_IsCreatedInTestMode()        {            // Arrange: Dashboard is constructed in test mode in Setup()            var contentPanelField = typeof(Dashboard).GetField("_contentPanel", BindingFlags.NonPublic | BindingFlags.Instance);            var panel = contentPanelField.GetValue(_dashboard) as Panel;            // Assert: Content panel should be null or minimal in test mode (constructor does not call layout)            // Optionally, call CreateFallbackLayoutWithControls and verify            var fallbackLayoutMethod = typeof(Dashboard).GetMethod("CreateFallbackLayoutWithControls", BindingFlags.NonPublic | BindingFlags.Instance);            fallbackLayoutMethod.Invoke(_dashboard, null);            panel = contentPanelField.GetValue(_dashboard) as Panel;            Assert.IsNotNull(panel, "Content panel should be initialized after fallback layout creation");        }    }    // [TestClass]    // public class RouteRepositoryOfflineTest    // {    //     [Fact]    //     public void GetAllRoutes_WhenDatabaseOffline_ReturnsSampleData()    //     {    //         // Arrange    //         var repo = new RouteRepository();    //         // Simulate DB offline by forcing fallback (connection string invalid or DB not running)    //         // In this implementation, fallback is triggered by actual DB failure    //         // This test will pass if run without a DB, or you can force the fallback by renaming the DB    //         // Act    //         List<Route> routes = repo.GetAllRoutes();    //         // Assert    //         Assert.NotNull(routes);    //         Assert.NotEmpty(routes);    //         Assert.All(routes, r => Assert.False(string.IsNullOrWhiteSpace(r.RouteName)));    //     }    // }}

