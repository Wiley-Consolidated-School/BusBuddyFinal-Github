using System;using System.Threading.Tasks;using Xunit;using Xunit.Abstractions;using BusBuddy.Models;namespace BusBuddy.UI.Tests{    /// <summary>    /// End-to-end workflow tests validating complete business processes.    /// Tests cover route management, maintenance scheduling, and analytics generation.    /// </summary>    public class EndToEndWorkflowTests : SystemTestBase    {        private readonly ITestOutputHelper _output;        public EndToEndWorkflowTests(ITestOutputHelper output)        {            _output = output;        }        #region Route Management Workflow Tests        [Fact]        public async Task CompleteRouteManagement_Workflow_ShouldWork()        {            _output.WriteLine("Starting complete route management workflow test...");            // 1. Create new bus            var testBus = CreateTestVehicle("_RouteWorkflow");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            Assert.True(busId > 0, "Bus creation should succeed");            _output.WriteLine($"‚úÖ Created Bus with ID: {busId}");            // 2. Create new driver            var driver = CreateTestDriver("_RouteWorkflow");            var DriverId = DriverRepository.AddDriver(driver);            TestDriverIds.Add(DriverId);            Assert.True(DriverId > 0, "Driver creation should succeed");            _output.WriteLine($"‚úÖ Created driver with ID: {DriverId}");            // 3. Validate Bus and driver availability            var vehicleValidation = ValidationService.ValidateBusAvailability(busId, DateTime.Today);            var driverValidation = ValidationService.ValidateDriverAvailability(DriverId, DateTime.Today);            Assert.True(vehicleValidation.IsValid, $"Bus should be available: {vehicleValidation.GetErrorMessage()}");            Assert.True(driverValidation.IsValid, $"Driver should be available: {driverValidation.GetErrorMessage()}");            _output.WriteLine("‚úÖ Bus and driver availability validated");            // 4. Create and assign route            var route = CreateTestRoute(busId, DriverId, "_RouteWorkflow");            var RouteId = RouteRepository.AddRoute(route);            TestRouteIds.Add(RouteId);            Assert.True(RouteId > 0, "Route creation should succeed");            _output.WriteLine($"‚úÖ Created route with ID: {RouteId}");            // 5. Validate route assignment            var routeValidation = ValidationService.ValidateRouteAssignment(route);            Assert.True(routeValidation.IsValid, $"Route assignment should be valid: {routeValidation.GetErrorMessage()}");            _output.WriteLine("‚úÖ Route assignment validated");            // 6. Generate analytics report            var startDate = DateTime.Today.AddDays(-1);            var endDate = DateTime.Today.AddDays(1);            var metrics = await AnalyticsService.GetRouteEfficiencyMetricsAsync(startDate, endDate);            Assert.NotNull(metrics);            _output.WriteLine("‚úÖ Analytics report generated successfully");            // 7. Validate data consistency            var retrievedBus = BusRepository.GetBusById(busId);            var retrievedDriver = DriverRepository.GetDriverById(DriverId);            var retrievedRoute = RouteRepository.GetRouteById(RouteId);            Assert.NotNull(retrievedBus);            Assert.NotNull(retrievedDriver);            Assert.NotNull(retrievedRoute);            Assert.Equal(busId, retrievedRoute.AMbusId);            Assert.Equal(DriverId, retrievedRoute.AMDriverId);            _output.WriteLine("‚úÖ Data consistency validated");            _output.WriteLine("üéâ Complete route management workflow test PASSED");        }        [Fact]        public void MaintenanceScheduling_Workflow_ShouldWork()        {            _output.WriteLine("Starting maintenance scheduling workflow test...");            // 1. Create test bus            var testBus = CreateTestVehicle("_MaintenanceWorkflow");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            _output.WriteLine($"‚úÖ Created Bus with ID: {busId}");            // 2. Bus health monitoring (simulate by checking availability)            var healthCheck = ValidationService.ValidateBusAvailability(busId, DateTime.Today);            Assert.True(healthCheck.IsValid, "Bus should be healthy and available");            _output.WriteLine("‚úÖ Bus health check passed");            // 3. Create maintenance record (scheduled)            var maintenance = new Maintenance            {                busId = busId,                Date = DateTime.Today.AddDays(7).ToString("yyyy-MM-dd"),                MaintenanceCompleted = "SCHEDULED - Oil change and inspection",                Notes = "SCHEDULED maintenance for Bus health",                RepairCost = 150.00m,                OdometerReading = 50000            };            var maintenanceId = MaintenanceRepository.AddMaintenance(maintenance);            Assert.True(maintenanceId > 0, "Maintenance scheduling should succeed");            maintenance.MaintenanceID = maintenanceId; // Set the ID for future updates            _output.WriteLine($"‚úÖ Scheduled maintenance with ID: {maintenanceId}");            // 4. Validate maintenance record            var maintenanceValidation = ValidationService.ValidateMaintenanceRecord(maintenance);            Assert.True(maintenanceValidation.IsValid, $"Maintenance record should be valid: {maintenanceValidation.GetErrorMessage()}");            _output.WriteLine("‚úÖ Maintenance record validated");            // 5. Check Bus availability during maintenance period            var maintenanceDate = DateTime.Today.AddDays(7);            var availabilityCheck = ValidationService.ValidateBusAvailability(busId, maintenanceDate);            // Should fail due to scheduled maintenance            Assert.False(availabilityCheck.IsValid, "Bus should not be available during scheduled maintenance");            Assert.Contains("scheduled maintenance", availabilityCheck.GetErrorMessage().ToLower());            _output.WriteLine("‚úÖ Bus unavailability during maintenance validated");            // 6. Complete work order (update maintenance record)            maintenance.MaintenanceCompleted = "COMPLETED - Oil changed, inspection passed";            maintenance.Notes = "Maintenance completed successfully";            var updateResult = MaintenanceRepository.UpdateMaintenance(maintenance);            Assert.True(updateResult, "Maintenance completion update should succeed");            _output.WriteLine("‚úÖ Maintenance work order completed");            // 7. Update Bus status (if needed)            var updatedBus = BusRepository.GetBusById(busId);            Assert.NotNull(updatedBus);            Assert.Equal("Active", updatedBus.Status);            _output.WriteLine("‚úÖ Bus status confirmed as active");            _output.WriteLine("üéâ Maintenance scheduling workflow test PASSED");        }        #endregion        #region Driver Performance Workflow Tests        [Fact]        public async Task DriverPerformance_AnalysisWorkflow_ShouldWork()        {            _output.WriteLine("Starting driver performance analysis workflow test...");            // 1. Create test driver            var driver = CreateTestDriver("_PerformanceWorkflow");            var DriverId = DriverRepository.AddDriver(driver);            TestDriverIds.Add(DriverId);            _output.WriteLine($"‚úÖ Created driver with ID: {DriverId}");            // 2. Create test bus            var testBus = CreateTestVehicle("_PerformanceWorkflow");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            _output.WriteLine($"‚úÖ Created Bus with ID: {busId}");            // 3. Create multiple routes for performance analysis            for (int i = 0; i < 3; i++)            {                var route = CreateTestRoute(busId, DriverId, $"_Performance_{i}");                route.Date = DateTime.Today.AddDays(-i).ToString("yyyy-MM-dd");                route.AMBeginMiles = 1000 + (i * 50);                route.AMEndMiles = 1050 + (i * 50);                route.AMRiders = 20 + i;                var RouteId = RouteRepository.AddRoute(route);                TestRouteIds.Add(RouteId);                _output.WriteLine($"‚úÖ Created performance route {i + 1} with ID: {RouteId}");            }            // 4. Generate driver performance metrics            var startDate = DateTime.Today.AddDays(-7);            var endDate = DateTime.Today;            try            {                var performance = await AnalyticsService.CalculateDriverPerformanceAsync(DriverId, startDate, endDate);                if (performance != null)                {                    Assert.Equal(DriverId, performance.DriverId);                    Assert.True(performance.TotalRoutes >= 0);                    Assert.True(performance.TotalMiles >= 0);                    _output.WriteLine($"‚úÖ Driver performance calculated: {performance.TotalRoutes} routes, {performance.TotalMiles} miles");                }                else                {                    _output.WriteLine("‚ö†Ô∏è Performance calculation returned null (expected for new test data)");                }            }            catch (ArgumentException ex) when (ex.Message.Contains("not found"))            {                _output.WriteLine("‚ö†Ô∏è Driver not found in analytics (expected for test environment)");            }            // 5. Validate driver data consistency            var retrievedDriver = DriverRepository.GetDriverById(DriverId);            Assert.NotNull(retrievedDriver);            Assert.Equal(driver.Name, retrievedDriver.Name);            Assert.Equal("Active", retrievedDriver.Status);            _output.WriteLine("‚úÖ Driver data consistency validated");            _output.WriteLine("üéâ Driver performance analysis workflow test PASSED");        }        #endregion        #region Data Integrity Workflow Tests        [Fact]        public void DataIntegrity_AcrossOperations_ShouldMaintainConsistency()        {            _output.WriteLine("Starting data integrity across operations test...");            // 1. Create baseline data            var testBus = CreateTestVehicle("_IntegrityTest");            var driver = CreateTestDriver("_IntegrityTest");            var busId = BusRepository.AddBus(bus);            var DriverId = DriverRepository.AddDriver(driver);            TestbusIds.Add(busId);            TestDriverIds.Add(DriverId);            _output.WriteLine($"‚úÖ Created baseline data: Bus {busId}, Driver {DriverId}");            // 2. Perform multiple operations            var route1 = CreateTestRoute(busId, DriverId, "_Integrity1");            var route2 = CreateTestRoute(busId, DriverId, "_Integrity2");            route2.Date = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd");            var routeId1 = RouteRepository.AddRoute(route1);            var routeId2 = RouteRepository.AddRoute(route2);            TestRouteIds.Add(routeId1);            TestRouteIds.Add(routeId2);            _output.WriteLine($"‚úÖ Created routes: {routeId1}, {routeId2}");            // 3. Validate referential integrity            var retrievedRoute1 = RouteRepository.GetRouteById(routeId1);            var retrievedRoute2 = RouteRepository.GetRouteById(routeId2);            Assert.NotNull(retrievedRoute1);            Assert.NotNull(retrievedRoute2);            Assert.Equal(busId, retrievedRoute1.AMbusId);            Assert.Equal(busId, retrievedRoute2.AMbusId);            Assert.Equal(DriverId, retrievedRoute1.AMDriverId);            Assert.Equal(DriverId, retrievedRoute2.AMDriverId);            _output.WriteLine("‚úÖ Referential integrity validated");            // 4. Test cascading validation            var validation1 = ValidationService.ValidateRouteAssignment(retrievedRoute1);            var validation2 = ValidationService.ValidateRouteAssignment(retrievedRoute2);            Assert.True(validation1.IsValid, $"Route 1 validation failed: {validation1.GetErrorMessage()}");            Assert.True(validation2.IsValid, $"Route 2 validation failed: {validation2.GetErrorMessage()}");            _output.WriteLine("‚úÖ Cascading validation passed");            // 5. Update operations and revalidate            bus.Status = "Out of Service";            var updateResult = BusRepository.UpdateBus(bus);            Assert.True(updateResult, "Bus update should succeed");            // Bus should now be unavailable for new assignments            var availabilityCheck = ValidationService.ValidateBusAvailability(busId, DateTime.Today);            Assert.False(availabilityCheck.IsValid, "Bus out of service should be unavailable");            _output.WriteLine("‚úÖ Update operations and validation consistency verified");            _output.WriteLine("üéâ Data integrity across operations test PASSED");        }        #endregion    }}

