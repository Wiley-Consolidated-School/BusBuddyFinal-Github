using System;using System.Collections.Generic;using System.Linq;using BusBuddy.Models;namespace BusBuddy.UI.Tests{    /// <summary>    /// Factory for creating comprehensive test data sets for various testing scenarios.    /// Provides methods to generate realistic test data for performance, load, and compliance testing.    /// </summary>    public static class TestDataFactory    {        #region Bus Test Data        /// <summary>        /// Creates a Bus with maintenance history spanning the specified number of days.        /// </summary>        /// <param name="days">Number of days of maintenance history to create</param>        /// <param name="suffix">Optional suffix for unique identification</param>        /// <returns>Bus with associated maintenance records</returns>        public static (Bus bus, List<Maintenance> MaintenanceHistory) CreateVehicleWithHistory(int days, string suffix = "")        {            var timestamp = DateTime.Now.Ticks;            var testBus = new Bus {                BusNumber = $"VH{timestamp}{suffix}",                Make = GetRandomVehicleMake(),                Model = GetRandomVehicleModel(),                Year = GetRandomVehicleYear(),                SeatingCapacity = GetRandomSeatingCapacity(),                FuelType = "Diesel",                Status = "Active",                VIN = GenerateVIN(),                LicenseNumber = GenerateLicenseNumber()            };            var maintenanceHistory = new List<Maintenance>();            // Create maintenance records over the specified period            for (int i = 0; i < days / 30; i++) // One maintenance per month            {                var maintenanceDate = DateTime.Today.AddDays(-i * 30);                var maintenance = new Maintenance                {                    MaintenanceID = 0, // Will be set when saved                    Date = maintenanceDate.ToString("yyyy-MM-dd"),                    MaintenanceCompleted = GetRandomMaintenanceType(),                    Notes = $"Scheduled maintenance for {bus.BusNumber}",                    RepairCost = GetRandomMaintenanceCost(),                    OdometerReading = 50000 + (i * 2000), // Increasing mileage                    busId = bus.busId                };                maintenanceHistory.Add(maintenance);            }            return (bus, maintenanceHistory);        }        /// <summary>        /// Creates a fleet of vehicles with varying characteristics for load testing.        /// </summary>        /// <param name="count">Number of vehicles to create</param>        /// <param name="prefix">Prefix for Bus identification</param>        /// <returns>List of vehicles with diverse characteristics</returns>        public static List<Bus> CreateVehicleFleet(int count, string prefix = "FLEET")        {            var vehicles = new List<Bus>();            var makes = new[] { "Ford", "Chevrolet", "International", "Blue Bird", "Thomas Built" };            var models = new[] { "Transit", "Express", "3000", "Vision", "C2" };            var statuses = new[] { "Active", "Maintenance", "Inactive" };            for (int i = 0; i < count; i++)            {                var testBus = new Bus {                    BusNumber = $"{prefix}{i:D4}",                    Make = makes[i % makes.Length],                    Model = models[i % models.Length],                    Year = 2015 + (i % 8), // Years 2015-2022                    SeatingCapacity = 60 + (i % 20), // 60-79 seats                    FuelType = i % 10 == 0 ? "Electric" : "Diesel", // 10% electric                    Status = statuses[i % statuses.Length],                    VIN = GenerateVIN(),                    LicenseNumber = GenerateLicenseNumber()                };                vehicles.Add(bus);            }            return vehicles;        }        #endregion        #region Route Test Data        /// <summary>        /// Creates a complex route with multiple stops and realistic timing.        /// </summary>        /// <param name="stops">Number of stops on the route</param>        /// <param name="busId">ID of the assigned bus</param>        /// <param name="DriverId">ID of the assigned driver</param>        /// <param name="suffix">Optional suffix for unique identification</param>        /// <returns>Route with detailed stop information</returns>        public static Route CreateComplexRoute(int stops, int? busId = null, int? DriverId = null, string suffix = "")        {            var timestamp = DateTime.Now.Ticks;            var route = new Route            {                RouteName = $"ComplexRoute{timestamp}{suffix}",                Date = DateTime.Today.ToString("yyyy-MM-dd"),                AMbusId = busId,                AMDriverId = DriverId,                RouteType = "CDL",                // AM Route data                AMBeginMiles = GetRandomMileage(50000, 100000),                AMEndMiles = 0, // Will be calculated                AMRiders = GetRandomRiderCount(stops),                // PM Route data                PMbusId = busId,                PMDriverId = DriverId,                PMBeginMiles = 0, // Will be set from AM end                PMEndMiles = 0, // Will be calculated                PMRiders = GetRandomRiderCount(stops),                Notes = $"Complex route with {stops} stops serving diverse neighborhoods"            };            // Calculate realistic mileage based on stops            var routeMiles = stops * 2; // 2 miles per stop average            route.AMEndMiles = route.AMBeginMiles + routeMiles;            route.PMBeginMiles = route.AMEndMiles;            route.PMEndMiles = route.PMBeginMiles + routeMiles;            return route;        }        /// <summary>        /// Creates a set of routes covering a date range for analytics testing.        /// </summary>        /// <param name="busIds">Available Bus IDs</param>        /// <param name="driverIds">Available driver IDs</param>        /// <param name="startDate">Start date for route coverage</param>        /// <param name="endDate">End date for route coverage</param>        /// <returns>List of routes covering the specified period</returns>        public static List<Route> CreateRouteHistory(List<int> busIds, List<int> driverIds, DateTime startDate, DateTime endDate)        {            var routes = new List<Route>();            var currentDate = startDate;            while (currentDate <= endDate)            {                // Skip weekends for school routes                if (currentDate.DayOfWeek != DayOfWeek.Saturday && currentDate.DayOfWeek != DayOfWeek.Sunday)                {                    // Create routes for available vehicles                    for (int i = 0; i < Math.Min(busIds.Count, driverIds.Count); i++)                    {                        var route = new Route                        {                            RouteName = $"Route_{currentDate:yyyyMMdd}_{i}",                            Date = currentDate.ToString("yyyy-MM-dd"),                            AMbusId = busIds[i],                            AMDriverId = driverIds[i],                            PMbusId = busIds[i],                            PMDriverId = driverIds[i],                            RouteType = "CDL",                            AMBeginMiles = 50000 + (i * 1000),                            AMEndMiles = 50025 + (i * 1000),                            AMRiders = GetRandomRiderCount(5),                            PMBeginMiles = 50025 + (i * 1000),                            PMEndMiles = 50050 + (i * 1000),                            PMRiders = GetRandomRiderCount(5)                        };                        routes.Add(route);                    }                }                currentDate = currentDate.AddDays(1);            }            return routes;        }        #endregion        #region Driver Test Data        /// <summary>        /// Creates a diverse set of drivers with varying certifications and experience levels.        /// </summary>        /// <param name="count">Number of drivers to create</param>        /// <param name="prefix">Prefix for driver identification</param>        /// <returns>List of drivers with realistic profiles</returns>        public static List<Driver> CreateDriverCohort(int count, string prefix = "DRIVER")        {            var drivers = new List<Driver>();            var firstNames = new[] { "John", "Mary", "Robert", "Patricia", "Michael", "Jennifer", "William", "Linda", "David", "Elizabeth" };            var lastNames = new[] { "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez" };            for (int i = 0; i < count; i++)            {                var firstName = firstNames[i % firstNames.Length];                var lastName = lastNames[i % lastNames.Length];                var driver = new Driver                {                    FirstName = firstName,                    LastName = $"{lastName}{i:D3}",                    Name = $"{firstName} {lastName}{i:D3}",                    DriversLicenseType = "CDL",                    Status = i % 10 == 0 ? "Training" : "Active", // 10% in training                    DriverPhone = GeneratePhoneNumber(),                    DriverEmail = $"{firstName.ToLower()}.{lastName.ToLower()}{i:D3}@school.edu",                    CDLExpirationDate = DateTime.Today.AddMonths(6 + (i % 24)), // Expiration 6-30 months out                    IsTrainingComplete = i % 10 == 0 ? 0 : 1 // 10% not yet trained                };                drivers.Add(driver);            }            return drivers;        }        #endregion        #region Fuel Test Data        /// <summary>        /// Creates fuel records for a Bus over the specified number of months.        /// </summary>        /// <param name="busId">Bus ID for fuel records</param>        /// <param name="months">Number of months of fuel history</param>        /// <returns>List of fuel records with realistic data</returns>        public static List<Fuel> CreateFuelHistory(int busId, int months)        {            var fuelRecords = new List<Fuel>();            var fuelStations = new[] { "Shell Station", "Mobil Fuel", "BP Express", "Exxon Center", "Chevron Stop" };            for (int month = 0; month < months; month++)            {                // 2-3 fuel-ups per month                var fuelsPerMonth = 2 + (month % 2);                for (int fuel = 0; fuel < fuelsPerMonth; fuel++)                {                    var fuelDate = DateTime.Today.AddMonths(-month).AddDays(-(fuel * 10));                    var fuelAmount = 40 + (fuel * 5) + (month % 10); // 40-60 gallons                    var fuelCost = fuelAmount * (3.20m + (month * 0.05m)); // Price variation over time                    var fuelRecord = new Fuel                    {                        VehicleFueledID = busId,                        FuelDate = fuelDate.ToString("yyyy-MM-dd"),                        FuelLocation = fuelStations[fuel % fuelStations.Length],                        FuelAmount = fuelAmount,                        FuelCost = Math.Round(fuelCost, 2),                        Notes = fuel % 5 == 0 ? "Regular maintenance fuel-up" : null                    };                    fuelRecords.Add(fuelRecord);                }            }            return fuelRecords.OrderBy(f => f.FuelDate).ToList();        }        #endregion        #region Compliance Test Data        /// <summary>        /// Creates test data that meets FERPA and regulatory compliance requirements.        /// </summary>        /// <param name="recordCount">Number of compliant records to create</param>        /// <returns>Collection of compliant test data</returns>        public static ComplianceTestDataSet CreateComplianceTestData(int recordCount)        {            var vehicles = CreateVehicleFleet(recordCount, "COMP");            var drivers = CreateDriverCohort(recordCount, "COMP");            // Ensure all drivers have proper certifications            foreach (var driver in drivers)            {                driver.DriversLicenseType = "CDL";                driver.CDLExpirationDate = DateTime.Today.AddYears(2);                driver.IsTrainingComplete = true;                driver.Status = "Active";            }            // Ensure all vehicles meet DOT requirements            foreach (var Bus in vehicles)            {                bus.Status = "Active";                testBusVIN = GenerateVIN();                bus.LicenseNumber = GenerateLicenseNumber();            }            return new ComplianceTestDataSet            {                Vehicles = vehicles,                Drivers = drivers,                CreatedDate = DateTime.UtcNow            };        }        #endregion        #region Helper Methods        private static string GetRandomVehicleMake()        {            var makes = new[] { "Ford", "Chevrolet", "International", "Blue Bird", "Thomas Built", "IC Bus" };            return makes[new Random().Next(makes.Length)];        }        private static string GetRandomVehicleModel()        {            var models = new[] { "Transit", "Express", "3000", "Vision", "C2", "CE300" };            return models[new Random().Next(models.Length)];        }        private static int GetRandomVehicleYear()        {            return 2015 + new Random().Next(8); // 2015-2022        }        private static int GetRandomSeatingCapacity()        {            var capacities = new[] { 48, 54, 60, 66, 72, 78, 84, 90 };            return capacities[new Random().Next(capacities.Length)];        }        private static string GetRandomMaintenanceType()        {            var types = new[] { "Oil Change", "Brake Service", "Tire Rotation", "Engine Inspection", "DOT Inspection", "Air Filter" };            return types[new Random().Next(types.Length)];        }        private static decimal GetRandomMaintenanceCost()        {            return Math.Round(50m + (decimal)(new Random().NextDouble() * 500), 2); // $50-$550        }        private static int GetRandomMileage(int min, int max)        {            return new Random().Next(min, max);        }        private static int GetRandomRiderCount(int maxStops)        {            return new Random().Next(10, Math.Min(90, maxStops * 15)); // Realistic rider count        }        private static string GenerateVIN()        {            const string chars = "ABCDEFGHJKLMNPRSTUVWXYZ0123456789";            var random = new Random();            return new string(Enumerable.Repeat(chars, 17).Select(s => s[random.Next(s.Length)]).ToArray());        }        private static string GenerateLicenseNumber()        {            var random = new Random();            return $"{(char)('A' + random.Next(26))}{(char)('A' + random.Next(26))}{random.Next(1000):D3}";        }        private static string GeneratePhoneNumber()        {            var random = new Random();            return $"555-{random.Next(100, 999)}-{random.Next(1000, 9999)}";        }        #endregion    }    /// <summary>    /// Data structure for compliance test data sets.    /// </summary>    public class ComplianceTestDataSet    {        public List<Bus> Vehicles { get; set; } = new List<Bus>();        public List<Driver> Drivers { get; set; } = new List<Driver>();        public DateTime CreatedDate { get; set; }        public bool IsValid()        {            return Vehicles.All(v => !string.IsNullOrEmpty(v.VIN) && !string.IsNullOrEmpty(v.LicenseNumber)) &&                   Drivers.All(d => d.CDLExpirationDate > DateTime.Today && d.IsTrainingComplete == true);        }    }}

