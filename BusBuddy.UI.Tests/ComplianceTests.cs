using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Threading.Tasks;using Xunit;using Xunit.Abstractions;using BusBuddy.Models;namespace BusBuddy.UI.Tests{    /// <summary>    /// Compliance and data protection tests validating FERPA requirements, data retention policies, and audit trails.    /// Tests ensure the application meets educational data privacy standards and regulatory requirements.    /// </summary>    public class ComplianceTests : SystemTestBase    {        private readonly ITestOutputHelper _output;        public ComplianceTests(ITestOutputHelper output)        {            _output = output;        }        #region FERPA Compliance Tests        [Fact]        public void StudentData_Privacy_ShouldBeProtected()        {            _output.WriteLine("Testing FERPA compliance for student data privacy...");            // Create route with student ridership data            var testBus = CreateTestVehicle("_FERPA_Test");            var driver = CreateTestDriver("_FERPA_Test");            var busId = BusRepository.AddBus(bus);            var DriverId = DriverRepository.AddDriver(driver);            TestbusIds.Add(busId);            TestDriverIds.Add(DriverId);            var route = CreateTestRoute(busId, DriverId, "_PrivacyTest");            route.AMRiders = 25; // Number of students            route.PMRiders = 28;            var RouteId = RouteRepository.AddRoute(route);            TestRouteIds.Add(RouteId);            // Verify student count is stored but not individual student data            var retrievedRoute = RouteRepository.GetRouteById(RouteId);            Assert.NotNull(retrievedRoute);            Assert.True(retrievedRoute.AMRiders > 0, "Student count should be recorded");            // In a FERPA-compliant system, individual student names/IDs should NOT be stored            // This test verifies we only store aggregate data            Assert.DoesNotContain("student", route.RouteName?.ToLower() ?? "");            Assert.DoesNotContain("name", route.Notes?.ToLower() ?? "");            _output.WriteLine("✅ Student data privacy (FERPA) test PASSED");        }        [Fact]        public void PersonalInformation_Access_ShouldBeLogged()        {            _output.WriteLine("Testing personal information access logging...");            var driver = CreateTestDriver("_AccessLog");            driver.DriverPhone = "555-PRIVATE";            driver.DriverEmail = "private@school.edu";            var DriverId = DriverRepository.AddDriver(driver);            TestDriverIds.Add(DriverId);            // Access personal information - this should be logged in production            var retrievedDriver = DriverRepository.GetDriverById(DriverId);            Assert.NotNull(retrievedDriver);            // Verify sensitive fields are present            Assert.False(string.IsNullOrEmpty(retrievedDriver.DriverPhone));            Assert.False(string.IsNullOrEmpty(retrievedDriver.DriverEmail));            // In production, this access should generate an audit log entry with:            // - User ID who accessed the data            // - Timestamp of access            // - Type of data accessed            // - Purpose of access (if available)            _output.WriteLine("✅ Personal information access logging test PASSED");        }        [Fact]        public void DataRetention_Policies_ShouldBeEnforced()        {            _output.WriteLine("Testing data retention policy enforcement...");            // Create old records that should be subject to retention policies            var oldBus = CreateTestVehicle("_OldRecord");            var oldDriver = CreateTestDriver("_OldRecord");            var busId = BusRepository.AddBus(oldBus);            var DriverId = DriverRepository.AddDriver(oldDriver);            TestbusIds.Add(busId);            TestDriverIds.Add(DriverId);            // Create old route data            var oldRoute = CreateTestRoute(busId, DriverId, "_OldRoute");            oldRoute.Date = DateTime.Today.AddYears(-5).ToString("yyyy-MM-dd"); // 5 years old            var RouteId = RouteRepository.AddRoute(oldRoute);            TestRouteIds.Add(RouteId);            // Verify the old record exists            var retrievedRoute = RouteRepository.GetRouteById(RouteId);            Assert.NotNull(retrievedRoute);            // In production, implement retention policy checks:            // - Route data older than 7 years should be archived/purged            // - Driver employment records should be retained per state requirements            // - Bus maintenance records should be retained per DOT requirements            // - Financial records should be retained per IRS requirements            var routeAge = DateTime.Today - DateTime.Parse(retrievedRoute.Date);            _output.WriteLine($"Route age: {routeAge.TotalDays} days");            // For this test, we verify the system can handle old records            Assert.True(routeAge.TotalDays > 365, "Test route should be old enough for retention policy testing");            _output.WriteLine("✅ Data retention policy test PASSED");        }        #endregion        #region Data Protection Tests        [Fact]        public void SensitiveData_Storage_ShouldBeSecure()        {            _output.WriteLine("Testing secure storage of sensitive data...");            var driver = CreateTestDriver("_SecureStorage");            driver.DriverPhone = "555-123-4567";            driver.DriverEmail = "secure@school.edu";            var DriverId = DriverRepository.AddDriver(driver);            TestDriverIds.Add(DriverId);            var retrievedDriver = DriverRepository.GetDriverById(DriverId);            Assert.NotNull(retrievedDriver);            // Verify sensitive data handling            // In production, consider:            // - Encryption at rest for SSN, license numbers            // - Hashing for passwords            // - Tokenization for credit card data (if any)            // - Field-level encryption for PII            // Test that sensitive data is not exposed in plain text logs            Assert.False(string.IsNullOrEmpty(retrievedDriver.DriverPhone));            // Test that driver licensing info is properly secured            Assert.False(string.IsNullOrEmpty(retrievedDriver.DriversLicenseType));            _output.WriteLine("✅ Sensitive data storage security test PASSED");        }        [Fact]        public void DataExport_Privacy_ShouldBeControlled()        {            _output.WriteLine("Testing data export privacy controls...");            // Create test data that might be exported            var vehicles = new List<int>();            var drivers = new List<int>();            for (int i = 0; i < 5; i++)            {                var testBus = CreateTestVehicle($"_Export_{i}");                var driver = CreateTestDriver($"_Export_{i}");                var busId = BusRepository.AddBus(bus);                var DriverId = DriverRepository.AddDriver(driver);                vehicles.Add(busId);                drivers.Add(DriverId);            }            TestbusIds.AddRange(vehicles);            TestDriverIds.AddRange(drivers);            // Simulate data export operations            var allVehicles = BusRepository.GetAllBuses();            var allDrivers = DriverRepository.GetAllDrivers();            Assert.NotNull(allVehicles);            Assert.NotNull(allDrivers);            // In production, data export should:            // - Require proper authorization            // - Log all export activities            // - Sanitize sensitive data            // - Apply data minimization principles            // - Include only necessary fields            foreach (var driver in allDrivers.Where(d => d.Name?.Contains("_Export_") == true))            {                // Verify sensitive data exists (for authorized exports)                Assert.False(string.IsNullOrEmpty(driver.Name));                // In production, mask/remove sensitive data for unauthorized users                // Example: driver.SSN = MaskSSN(driver.SSN);            }            _output.WriteLine("✅ Data export privacy controls test PASSED");        }        #endregion        #region Audit Trail Tests        [Fact]        public void SystemAccess_Audit_ShouldBeComprehensive()        {            _output.WriteLine("Testing comprehensive system access auditing...");            var auditEvents = new List<string>();            // Simulate various system operations that should be audited            var testBus = CreateTestVehicle("_AuditTest");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            auditEvents.Add($"Bus Created: ID {busId}");            var retrievedBus = BusRepository.GetBusById(busId);            auditEvents.Add($"Bus Accessed: ID {busId}");            bus.Status = "Maintenance";            BusRepository.UpdateBus(bus);            auditEvents.Add($"Bus Updated: ID {busId}");            // In production, audit trail should include:            // - User authentication events            // - Data access events            // - Data modification events            // - System administration events            // - Export/report generation events            // - Failed access attempts            var auditableOperations = new[]            {                "LOGIN_ATTEMPT",                "DATA_ACCESS",                "DATA_MODIFICATION",                "REPORT_GENERATION",                "ADMIN_ACTION",                "LOGOUT"            };            foreach (var operation in auditableOperations)            {                // Simulate audit log entry creation                var auditEntry = $"{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC - {operation} - User: TestUser - Resource: {operation}";                auditEvents.Add(auditEntry);                _output.WriteLine($"Audit: {auditEntry}");            }            Assert.True(auditEvents.Count > 0, "Audit events should be generated");            _output.WriteLine($"Generated {auditEvents.Count} audit events");            _output.WriteLine("✅ Comprehensive system access auditing test PASSED");        }        [Fact]        public void DataIntegrity_Audit_ShouldDetectChanges()        {            _output.WriteLine("Testing data integrity auditing...");            var testBus = CreateTestVehicle("_IntegrityTest");            var originalVIN = bus.VIN;            var originalStatus = bus.Status;            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            // Record original state            var originalChecksum = CalculateSimpleChecksum(bus);            // Modify the bus            bus.busId = busId;            bus.Status = "Maintenance";            testBusVIN = "MODIFIED_VIN_123";            BusRepository.UpdateBus(bus);            var modifiedBus = BusRepository.GetBusById(busId);            Assert.NotNull(modifiedBus);            var modifiedChecksum = CalculateSimpleChecksum(modifiedBus);            // Verify changes are detected            Assert.NotEqual(originalChecksum, modifiedChecksum);            Assert.NotEqual(originalStatus, modifiedBus.Status);            Assert.NotEqual(originalVIN, modifiedBus.VIN);            // In production, implement integrity checking:            // - Checksums/hashes for critical records            // - Change detection mechanisms            // - Unauthorized modification alerts            // - Data corruption detection            _output.WriteLine($"Original checksum: {originalChecksum}");            _output.WriteLine($"Modified checksum: {modifiedChecksum}");            _output.WriteLine("✅ Data integrity auditing test PASSED");        }        #endregion        #region Regulatory Compliance Tests        [Fact]        public void VehicleInspection_Records_ShouldMeetDOTRequirements()        {            _output.WriteLine("Testing DOT Bus inspection record compliance...");            var testBus = CreateTestVehicle("_DOT_Compliance");            testBusVIN = "1HGCM82633A123456"; // Valid format            bus.LicenseNumber = "ABC123"; // Valid format            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            // DOT requires certain Bus information to be maintained:            // - VIN number            // - License plate number            // - Inspection dates            // - Maintenance records            // - Driver assignment records            var retrievedBus = BusRepository.GetBusById(busId);            Assert.NotNull(retrievedBus);            Assert.False(string.IsNullOrEmpty(retrievedBus.VIN));            Assert.False(string.IsNullOrEmpty(retrievedBus.LicenseNumber));            // Verify VIN format (simplified check)            Assert.True(retrievedBus.VIN.Length >= 17 || retrievedBus.VIN.Contains("TEST"),                "VIN should be valid format or test data");            _output.WriteLine("✅ DOT Bus inspection record compliance test PASSED");        }        [Fact]        public void DriverCertification_Records_ShouldMeetRequirements()        {            _output.WriteLine("Testing driver certification record compliance...");            var driver = CreateTestDriver("_Certification");            driver.DriversLicenseType = "CDL";            driver.CDLExpirationDate = DateTime.Today.AddYears(2);            driver.IsTrainingComplete = true;            var DriverId = DriverRepository.AddDriver(driver);            TestDriverIds.Add(DriverId);            var retrievedDriver = DriverRepository.GetDriverById(DriverId);            Assert.NotNull(retrievedDriver);            // Regulatory requirements for school bus drivers:            // - Valid CDL license            // - Current medical certificate            // - Background check completion            // - Training certification            // - Drug testing records (if applicable)            Assert.Equal("CDL", retrievedDriver.DriversLicenseType);            Assert.True(retrievedDriver.CDLExpirationDate > DateTime.Today, "CDL should not be expired");            Assert.Equal(1, retrievedDriver.IsTrainingComplete);            // Check for upcoming expirations (compliance monitoring)            if (retrievedDriver.CDLExpirationDate.HasValue)            {                var daysUntilExpiration = (retrievedDriver.CDLExpirationDate.Value - DateTime.Today).TotalDays;                if (daysUntilExpiration < 90)                {                    _output.WriteLine($"⚠️ CDL expires in {daysUntilExpiration} days - renewal reminder needed");                }            }            _output.WriteLine("✅ Driver certification record compliance test PASSED");        }        [Fact]        public void FinancialRecords_Retention_ShouldMeetIRSRequirements()        {            _output.WriteLine("Testing financial record retention compliance...");            // Create fuel records (financial data)            var testBus = CreateTestVehicle("_Financial");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            var fuelRecord = new Fuel            {                VehicleFueledID = busId,                FuelDate = DateTime.Today.AddMonths(-6).ToString("yyyy-MM-dd"),                FuelLocation = "Test Station",                FuelAmount = 50.0m,                FuelCost = 150.75m            };            var fuelId = FuelRepository.AddFuelRecord(fuelRecord);            Assert.True(fuelId > 0, "Fuel record should be created");            var retrievedFuel = FuelRepository.GetFuelRecordById(fuelId);            Assert.NotNull(retrievedFuel);            // IRS requirements for financial record retention:            // - Keep records for at least 7 years            // - Maintain supporting documentation            // - Ensure data integrity            // - Provide audit trail            Assert.True(retrievedFuel.FuelCost > 0, "Financial amount should be recorded");            Assert.False(string.IsNullOrEmpty(retrievedFuel.FuelDate), "Transaction date should be recorded");            var recordAge = DateTime.Today - DateTime.Parse(retrievedFuel.FuelDate);            _output.WriteLine($"Financial record age: {recordAge.TotalDays} days");            // Cleanup fuel record            try { FuelRepository.DeleteFuelRecord(fuelId); } catch { }            _output.WriteLine("✅ Financial record retention compliance test PASSED");        }        #endregion        #region Helper Methods        private string CalculateSimpleChecksum(Bus bus)        {            // Simple checksum for data integrity testing            var data = $"{bus.BusNumber}{bus.Make}{bus.Model}{bus.Year}{bus.Status}{bus.VIN}";            return data.GetHashCode().ToString();        }        private string MaskSSN(string ssn)        {            if (string.IsNullOrEmpty(ssn) || ssn.Length < 4)                return ssn;            return "***-**-" + ssn.Substring(ssn.Length - 4);        }        private string MaskPhoneNumber(string phone)        {            if (string.IsNullOrEmpty(phone) || phone.Length < 4)                return phone;            return "***-***-" + phone.Substring(phone.Length - 4);        }        #endregion    }}

