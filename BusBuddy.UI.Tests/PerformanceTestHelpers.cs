using System;using System.Diagnostics;using System.Threading.Tasks;using Xunit;namespace BusBuddy.UI.Tests{    /// <summary>    /// Helper utilities for performance testing and measurement.    /// Provides methods to measure execution time, memory usage, and validate performance criteria.    /// </summary>    public static class PerformanceTestHelpers    {        /// <summary>        /// Measures the execution time of an asynchronous action.        /// </summary>        /// <param name="action">The async action to measure</param>        /// <returns>TimeSpan representing execution duration</returns>        public static async Task<TimeSpan> MeasureExecutionTimeAsync(Func<Task> action)        {            var stopwatch = Stopwatch.StartNew();            await action();            stopwatch.Stop();            return stopwatch.Elapsed;        }        /// <summary>        /// Measures the execution time of a synchronous action.        /// </summary>        /// <param name="action">The action to measure</param>        /// <returns>TimeSpan representing execution duration</returns>        public static TimeSpan MeasureExecutionTime(Action action)        {            var stopwatch = Stopwatch.StartNew();            action();            stopwatch.Stop();            return stopwatch.Elapsed;        }        /// <summary>        /// Gets the current memory usage of the application.        /// </summary>        /// <returns>Memory usage in bytes</returns>        public static long GetMemoryUsage()        {            GC.Collect();            GC.WaitForPendingFinalizers();            GC.Collect();            return GC.GetTotalMemory(false);        }        /// <summary>        /// Validates that an action completes within the specified time limit.        /// </summary>        /// <param name="action">The action to test</param>        /// <param name="maxDuration">Maximum allowed duration</param>        /// <param name="description">Description for assertion messages</param>        public static void AssertPerformance(Action action, TimeSpan maxDuration, string description = "Operation")        {            var duration = MeasureExecutionTime(action);            Assert.True(duration <= maxDuration,                $"{description} took {duration.TotalMilliseconds}ms, expected <= {maxDuration.TotalMilliseconds}ms");        }        /// <summary>        /// Validates that an async action completes within the specified time limit.        /// </summary>        /// <param name="action">The async action to test</param>        /// <param name="maxDuration">Maximum allowed duration</param>        /// <param name="description">Description for assertion messages</param>        public static async Task AssertPerformanceAsync(Func<Task> action, TimeSpan maxDuration, string description = "Operation")        {            var duration = await MeasureExecutionTimeAsync(action);            Assert.True(duration <= maxDuration,                $"{description} took {duration.TotalMilliseconds}ms, expected <= {maxDuration.TotalMilliseconds}ms");        }        /// <summary>        /// Validates that memory usage stays within acceptable limits.        /// </summary>        /// <param name="action">The action to test</param>        /// <param name="maxMemoryIncreaseMB">Maximum allowed memory increase in MB</param>        /// <param name="description">Description for assertion messages</param>        public static void AssertMemoryUsage(Action action, int maxMemoryIncreaseMB, string description = "Operation")        {            var beforeMemory = GetMemoryUsage();            action();            var afterMemory = GetMemoryUsage();            var memoryIncreaseMB = (afterMemory - beforeMemory) / (1024 * 1024);            Assert.True(memoryIncreaseMB <= maxMemoryIncreaseMB,                $"{description} used {memoryIncreaseMB}MB, expected <= {maxMemoryIncreaseMB}MB");        }        /// <summary>        /// Converts bytes to megabytes for readable output.        /// </summary>        /// <param name="bytes">Memory in bytes</param>        /// <returns>Memory in megabytes</returns>        public static double BytesToMB(long bytes)        {            return bytes / (1024.0 * 1024.0);        }        /// <summary>        /// Creates a simple performance report for test output.        /// </summary>        /// <param name="operationName">Name of the operation tested</param>        /// <param name="duration">Execution duration</param>        /// <param name="memoryUsed">Memory used in bytes</param>        /// <returns>Formatted performance report string</returns>        public static string CreatePerformanceReport(string operationName, TimeSpan duration, long memoryUsed)        {            return $"Performance Report - {operationName}:\n" +                   $"  Duration: {duration.TotalMilliseconds:F2}ms\n" +                   $"  Memory: {BytesToMB(memoryUsed):F2}MB\n" +                   $"  Status: {(duration.TotalSeconds < 3 ? "✅ PASS" : "⚠️ SLOW")}";        }    }}

