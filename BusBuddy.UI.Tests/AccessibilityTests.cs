using System;using System.Drawing;using System.Windows.Forms;using System.Threading.Tasks;using Xunit;using Xunit.Abstractions;using BusBuddy.UI;namespace BusBuddy.UI.Tests{    /// <summary>    /// Accessibility and usability tests validating keyboard navigation, DPI scaling, and user experience.    /// Tests ensure the application is accessible to users with disabilities and works across different display configurations.    /// </summary>    public class AccessibilityTests : SystemTestBase    {        private readonly ITestOutputHelper _output;        public AccessibilityTests(ITestOutputHelper output)        {            _output = output;        }        #region Keyboard Navigation Tests        [Fact]        public void Dashboard_KeyboardNavigation_ShouldFollowTabOrder()        {            _output.WriteLine("Testing dashboard keyboard navigation...");            // Create a test form to simulate dashboard            using (var testForm = new Form())            {                testForm.Text = "Test Dashboard";                testForm.Size = new Size(800, 600);                // Add typical dashboard controls                var controls = new Control[]                {                    new Button { Text = "New bus", TabIndex = 0, TabStop = true },                    new Button { Text = "New Driver", TabIndex = 1, TabStop = true },                    new Button { Text = "Route Analytics", TabIndex = 2, TabStop = true },                    new TextBox { Text = "Search...", TabIndex = 3, TabStop = true },                    new Button { Text = "Generate Report", TabIndex = 4, TabStop = true }                };                // Add controls to form                foreach (var control in controls)                {                    control.Location = new Point(10, control.TabIndex * 30 + 10);                    control.Size = new Size(150, 25);                    testForm.Controls.Add(control);                }                // Test tab order                testForm.Show();                var firstControl = testForm.GetNextControl(null, true);                Assert.NotNull(firstControl);                Assert.Equal(0, firstControl.TabIndex);                // Test forward navigation                var currentControl = firstControl;                for (int i = 1; i < controls.Length; i++)                {                    var nextControl = testForm.GetNextControl(currentControl, true);                    Assert.NotNull(nextControl);                    Assert.Equal(i, nextControl.TabIndex);                    currentControl = nextControl;                }                // Test backward navigation                currentControl = controls[controls.Length - 1];                for (int i = controls.Length - 2; i >= 0; i--)                {                    var prevControl = testForm.GetNextControl(currentControl, false);                    Assert.NotNull(prevControl);                    Assert.Equal(i, prevControl.TabIndex);                    currentControl = prevControl;                }                testForm.Hide();            }            _output.WriteLine("✅ Dashboard keyboard navigation test PASSED");        }        [Fact]        public void DataGridView_KeyboardAccess_ShouldSupportNavigation()        {            _output.WriteLine("Testing DataGridView keyboard accessibility...");            using (var testForm = new Form())            using (var dataGrid = new DataGridView())            {                testForm.Controls.Add(dataGrid);                dataGrid.Dock = DockStyle.Fill;                // Add test columns                dataGrid.Columns.Add("BusNumber", "Bus Number");                dataGrid.Columns.Add("Make", "Make");                dataGrid.Columns.Add("Status", "Status");                // Add test data                for (int i = 0; i < 5; i++)                {                    dataGrid.Rows.Add($"V{i:D3}", $"Make{i}", "Active");                }                testForm.Show();                // Test keyboard accessibility properties                Assert.True(dataGrid.TabStop, "DataGridView should be included in tab order");                Assert.True(dataGrid.CanFocus, "DataGridView should be focusable");                // Test basic navigation                dataGrid.Focus();                Assert.Equal(0, dataGrid.CurrentCell.RowIndex);                Assert.Equal(0, dataGrid.CurrentCell.ColumnIndex);                // Simulate arrow key navigation                dataGrid.CurrentCell = dataGrid[1, 0]; // Move to second column                Assert.Equal(1, dataGrid.CurrentCell.ColumnIndex);                dataGrid.CurrentCell = dataGrid[0, 1]; // Move to second row                Assert.Equal(1, dataGrid.CurrentCell.RowIndex);                testForm.Hide();            }            _output.WriteLine("✅ DataGridView keyboard accessibility test PASSED");        }        [Fact]        public void MenuSystem_KeyboardShortcuts_ShouldWork()        {            _output.WriteLine("Testing menu system keyboard shortcuts...");            using (var testForm = new Form())            {                var menuStrip = new MenuStrip();                testForm.MainMenuStrip = menuStrip;                testForm.Controls.Add(menuStrip);                // Create File menu with shortcuts                var fileMenu = new ToolStripMenuItem("&File");                var newVehicleItem = new ToolStripMenuItem("&New bus", null, (s, e) => { });                newVehicleItem.ShortcutKeys = Keys.Control | Keys.N;                fileMenu.DropDownItems.Add(newVehicleItem);                var openItem = new ToolStripMenuItem("&Open", null, (s, e) => { });                openItem.ShortcutKeys = Keys.Control | Keys.O;                fileMenu.DropDownItems.Add(openItem);                var saveItem = new ToolStripMenuItem("&Save", null, (s, e) => { });                saveItem.ShortcutKeys = Keys.Control | Keys.S;                fileMenu.DropDownItems.Add(saveItem);                // Create Edit menu                var editMenu = new ToolStripMenuItem("&Edit");                var copyItem = new ToolStripMenuItem("&Copy", null, (s, e) => { });                copyItem.ShortcutKeys = Keys.Control | Keys.C;                editMenu.DropDownItems.Add(copyItem);                var pasteItem = new ToolStripMenuItem("&Paste", null, (s, e) => { });                pasteItem.ShortcutKeys = Keys.Control | Keys.V;                editMenu.DropDownItems.Add(pasteItem);                menuStrip.Items.Add(fileMenu);                menuStrip.Items.Add(editMenu);                testForm.Show();                // Verify keyboard shortcuts are set                foreach (ToolStripMenuItem menu in menuStrip.Items)                {                    Assert.Contains("&", menu.Text); // Mnemonic indicator                    foreach (ToolStripItem item in menu.DropDownItems)                    {                        if (item is ToolStripMenuItem menuItem && menuItem.ShortcutKeys != Keys.None)                        {                            Assert.NotEqual(Keys.None, menuItem.ShortcutKeys);                            _output.WriteLine($"✅ Shortcut verified: {menuItem.Text} = {menuItem.ShortcutKeys}");                        }                    }                }                testForm.Hide();            }            _output.WriteLine("✅ Menu system keyboard shortcuts test PASSED");        }        #endregion        #region DPI Scaling Tests        [Fact]        public void Controls_HighDPI_ShouldScaleProperly()        {            _output.WriteLine("Testing high DPI scaling support...");            using (var testForm = new Form())            {                testForm.AutoScaleMode = AutoScaleMode.Dpi;                testForm.Size = new Size(400, 300);                // Add controls that should scale                var label = new Label                {                    Text = "Bus Information",                    Location = new Point(10, 10),                    Size = new Size(200, 20),                    AutoSize = false                };                var textBox = new TextBox                {                    Location = new Point(10, 40),                    Size = new Size(150, 20)                };                var button = new Button                {                    Text = "Save Changes",                    Location = new Point(10, 70),                    Size = new Size(100, 30)                };                testForm.Controls.AddRange(new Control[] { label, textBox, button });                // Get current DPI                using (var g = testForm.CreateGraphics())                {                    var dpiX = g.DpiX;                    var dpiY = g.DpiY;                    _output.WriteLine($"Current DPI: {dpiX} x {dpiY}");                    // Verify controls are positioned reasonably                    testForm.Show();                    Assert.True(label.Width > 0, "Label should have width");                    Assert.True(label.Height > 0, "Label should have height");                    Assert.True(textBox.Width > 0, "TextBox should have width");                    Assert.True(button.Width > 0, "Button should have width");                    // Verify controls don't overlap inappropriately                    Assert.True(textBox.Top > label.Bottom, "TextBox should be below label");                    Assert.True(button.Top > textBox.Bottom, "Button should be below textbox");                    testForm.Hide();                }            }            _output.WriteLine("✅ High DPI scaling test PASSED");        }        [Fact]        public void Fonts_Scaling_ShouldMaintainReadability()        {            _output.WriteLine("Testing font scaling for readability...");            using (var testForm = new Form())            {                // Test different font sizes                var fontSizes = new float[] { 8.25f, 9f, 10f, 12f, 14f, 16f };                foreach (var fontSize in fontSizes)                {                    using (var font = new Font("Microsoft Sans Serif", fontSize))                    {                        var label = new Label                        {                            Text = "Sample Text for Readability Testing",                            Font = font,                            AutoSize = true                        };                        testForm.Controls.Add(label);                        // Verify font metrics                        Assert.True(label.Font.Size >= 8, $"Font size {fontSize} should be readable");                        Assert.True(label.Width > 0, "Label should have measurable width");                        Assert.True(label.Height > 0, "Label should have measurable height");                        testForm.Controls.Remove(label);                        label.Dispose();                    }                }            }            _output.WriteLine("✅ Font scaling readability test PASSED");        }        #endregion        #region Screen Reader Support Tests        [Fact]        public void Controls_AccessibleNames_ShouldBeSet()        {            _output.WriteLine("Testing accessible names for screen readers...");            using (var testForm = new Form())            {                // Create controls with proper accessibility information                var vehicleNumberLabel = new Label                {                    Text = "Bus Number:",                    Location = new Point(10, 10)                };                var vehicleNumberTextBox = new TextBox                {                    Location = new Point(120, 10),                    AccessibleName = "Bus Number",                    AccessibleDescription = "Enter the Bus identification number"                };                var statusLabel = new Label                {                    Text = "Status:",                    Location = new Point(10, 40)                };                var statusComboBox = new ComboBox                {                    Location = new Point(120, 40),                    AccessibleName = "Bus Status",                    AccessibleDescription = "Select the current status of the bus"                };                statusComboBox.Items.AddRange(new[] { "Active", "Maintenance", "Inactive" });                var saveButton = new Button                {                    Text = "Save bus",                    Location = new Point(10, 70),                    AccessibleName = "Save Bus Information",                    AccessibleDescription = "Save the Bus information to the database"                };                testForm.Controls.AddRange(new Control[]                {                    vehicleNumberLabel, vehicleNumberTextBox,                    statusLabel, statusComboBox,                    saveButton                });                testForm.Show();                // Verify accessibility properties are set                Assert.False(string.IsNullOrEmpty(vehicleNumberTextBox.AccessibleName));                Assert.False(string.IsNullOrEmpty(vehicleNumberTextBox.AccessibleDescription));                Assert.False(string.IsNullOrEmpty(statusComboBox.AccessibleName));                Assert.False(string.IsNullOrEmpty(saveButton.AccessibleName));                // Verify accessible roles are appropriate                Assert.True(vehicleNumberTextBox.AccessibleRole == AccessibleRole.Text ||                          vehicleNumberTextBox.AccessibleRole == AccessibleRole.Default,                          "TextBox should have Text or Default accessible role");                Assert.True(statusComboBox.AccessibleRole == AccessibleRole.ComboBox ||                          statusComboBox.AccessibleRole == AccessibleRole.Default,                          "ComboBox should have ComboBox or Default accessible role");                Assert.True(saveButton.AccessibleRole == AccessibleRole.PushButton ||                          saveButton.AccessibleRole == AccessibleRole.Default,                          "Button should have PushButton or Default accessible role");                testForm.Hide();            }            _output.WriteLine("✅ Screen reader accessible names test PASSED");        }        [Fact]        public void DataDisplay_AccessibleStructure_ShouldBeLogical()        {            _output.WriteLine("Testing accessible structure for data display...");            using (var testForm = new Form())            using (var dataGrid = new DataGridView())            {                testForm.Controls.Add(dataGrid);                dataGrid.Dock = DockStyle.Fill;                // Configure for accessibility                dataGrid.AccessibleName = "Bus List";                dataGrid.AccessibleDescription = "List of all vehicles in the fleet";                // Add columns with accessible headers                dataGrid.Columns.Add(new DataGridViewTextBoxColumn                {                    Name = "BusNumber",                    HeaderText = "Bus Number",                    Width = 100                });                dataGrid.Columns.Add(new DataGridViewTextBoxColumn                {                    Name = "Make",                    HeaderText = "Make",                    Width = 100                });                dataGrid.Columns.Add(new DataGridViewTextBoxColumn                {                    Name = "Status",                    HeaderText = "Status",                    Width = 100                });                // Add sample data                dataGrid.Rows.Add("V001", "Ford", "Active");                dataGrid.Rows.Add("V002", "Chevrolet", "Maintenance");                testForm.Show();                // Verify grid accessibility                Assert.False(string.IsNullOrEmpty(dataGrid.AccessibleName));                Assert.True(dataGrid.ColumnHeadersVisible, "Column headers should be visible for screen readers");                Assert.True(dataGrid.RowHeadersVisible, "Row headers should be visible for navigation");                // Verify column headers                foreach (DataGridViewColumn column in dataGrid.Columns)                {                    Assert.False(string.IsNullOrEmpty(column.HeaderText));                }                testForm.Hide();            }            _output.WriteLine("✅ Accessible data display structure test PASSED");        }        #endregion        #region Color and Contrast Tests        [Fact]        public void ColorScheme_Accessibility_ShouldMeetContrastRequirements()        {            _output.WriteLine("Testing color contrast for accessibility...");            // Test common UI color combinations            var colorTests = new[]            {                new { Background = Color.White, Foreground = Color.Black, Description = "Standard text" },                new { Background = Color.Blue, Foreground = Color.White, Description = "Button text" },                new { Background = Color.LightGray, Foreground = Color.Black, Description = "Disabled text" },                new { Background = Color.Red, Foreground = Color.White, Description = "Error message" },                new { Background = Color.Green, Foreground = Color.White, Description = "Success message" }            };            foreach (var test in colorTests)            {                // Calculate relative luminance (simplified)                var bgLuminance = CalculateRelativeLuminance(test.Background);                var fgLuminance = CalculateRelativeLuminance(test.Foreground);                // Calculate contrast ratio                var lighter = Math.Max(bgLuminance, fgLuminance);                var darker = Math.Min(bgLuminance, fgLuminance);                var contrastRatio = (lighter + 0.05) / (darker + 0.05);                // WCAG AA requires 4.5:1 for normal text, 3:1 for large text                var meetsStandard = contrastRatio >= 4.5;                _output.WriteLine($"{test.Description}: Contrast ratio {contrastRatio:F2}:1 - {(meetsStandard ? "✅ PASS" : "⚠️ REVIEW")}");                // For critical UI elements, enforce the standard                if (test.Description.Contains("Standard text") || test.Description.Contains("Error"))                {                    Assert.True(contrastRatio >= 3.0, $"{test.Description} should meet minimum contrast requirements");                }            }            _output.WriteLine("✅ Color contrast accessibility test PASSED");        }        [Fact]        public void ColorBlindness_Support_ShouldNotRelyOnColorAlone()        {            _output.WriteLine("Testing color blindness accessibility...");            using (var testForm = new Form())            {                // Create status indicators that use more than just color                var activeLabel = new Label                {                    Text = "✅ Active",                    ForeColor = Color.Green,                    Location = new Point(10, 10)                };                var maintenanceLabel = new Label                {                    Text = "🔧 Maintenance",                    ForeColor = Color.Orange,                    Location = new Point(10, 40)                };                var inactiveLabel = new Label                {                    Text = "❌ Inactive",                    ForeColor = Color.Red,                    Location = new Point(10, 70)                };                testForm.Controls.AddRange(new Control[] { activeLabel, maintenanceLabel, inactiveLabel });                testForm.Show();                // Verify that status is communicated through text/symbols, not just color                Assert.Contains("Active", activeLabel.Text);                Assert.Contains("Maintenance", maintenanceLabel.Text);                Assert.Contains("Inactive", inactiveLabel.Text);                // Verify symbols or text provide meaning beyond color                Assert.True(activeLabel.Text.Length > "Active".Length, "Should include symbols or additional text");                Assert.True(maintenanceLabel.Text.Length > "Maintenance".Length, "Should include symbols or additional text");                Assert.True(inactiveLabel.Text.Length > "Inactive".Length, "Should include symbols or additional text");                testForm.Hide();            }            _output.WriteLine("✅ Color blindness support test PASSED");        }        #endregion        #region Helper Methods        private double CalculateRelativeLuminance(Color color)        {            // Simplified relative luminance calculation            var r = color.R / 255.0;            var g = color.G / 255.0;            var b = color.B / 255.0;            // Apply gamma correction            r = r <= 0.03928 ? r / 12.92 : Math.Pow((r + 0.055) / 1.055, 2.4);            g = g <= 0.03928 ? g / 12.92 : Math.Pow((g + 0.055) / 1.055, 2.4);            b = b <= 0.03928 ? b / 12.92 : Math.Pow((b + 0.055) / 1.055, 2.4);            return 0.2126 * r + 0.7152 * g + 0.0722 * b;        }        #endregion    }}

