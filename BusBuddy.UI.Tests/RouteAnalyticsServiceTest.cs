using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Xunit;using BusBuddy.Business;using BusBuddy.Models;using BusBuddy.Data;// Disable nullable reference types for testing null arguments#nullable disablenamespace BusBuddy.UI.Tests{    /// <summary>    /// Tests for RouteAnalyticsService ensuring proper business analytics and calculations.    /// Tests cover route efficiency metrics, cost calculations, and optimization suggestions.    /// </summary>    public class RouteAnalyticsServiceTest : IDisposable    {        private readonly RouteAnalyticsService _analyticsService;        private readonly RouteRepository _routeRepository;        private readonly List<int> _testRouteIds;        public RouteAnalyticsServiceTest()        {            _routeRepository = new RouteRepository();            _analyticsService = new RouteAnalyticsService(                _routeRepository,                new BusRepository(),                new DriverRepository(),                new FuelRepository(),                new ActivityRepository());            _testRouteIds = new List<int>();        }        public void Dispose()        {            // Cleanup test routes            foreach (var id in _testRouteIds)            {                try                {                    _routeRepository.DeleteRoute(id);                }                catch                {                    // Ignore cleanup errors                }            }        }        #region Route Efficiency Calculation Tests        [Fact]        public void CalculateRouteEfficiency_WithValidRoute_ShouldReturnMetrics()        {            // Arrange            var testRoute = CreateTestRoute();            // Act            var result = _analyticsService.CalculateRouteEfficiency(testRoute);            // Assert            Assert.NotNull(result);            Assert.Equal(testRoute.RouteId, result.RouteId);            Assert.Equal(testRoute.RouteName, result.RouteName);            Assert.True(result.TotalMiles >= 0);            Assert.True(result.TotalRiders >= 0);        }        [Fact]        public void CalculateRouteEfficiency_WithNullRoute_ShouldReturnNull()        {            // Act            var result = _analyticsService.CalculateRouteEfficiency(null);            // Assert            Assert.Null(result);        }        [Fact]        public void CalculateRouteEfficiency_WithEmptyRoute_ShouldReturnNull()        {            // Arrange            var emptyRoute = new Route(); // No meaningful data            // Act            var result = _analyticsService.CalculateRouteEfficiency(emptyRoute);            // Assert            Assert.Null(result);        }        [Fact]        public void CalculateRouteEfficiency_WithValidMileageAndRiders_ShouldCalculateMilesPerRider()        {            // Arrange            var testRoute = CreateTestRoute();            testRoute.AMBeginMiles = 100;            testRoute.AMEndMiles = 125; // 25 miles AM            testRoute.PMBeginMiles = 125;            testRoute.PMEndMiles = 150; // 25 miles PM            testRoute.AMRiders = 30;            testRoute.PMRiders = 25;            // Act            var result = _analyticsService.CalculateRouteEfficiency(testRoute);            // Assert            Assert.NotNull(result);            Assert.Equal(50, result.TotalMiles); // 25 + 25            Assert.Equal(55, result.TotalRiders); // 30 + 25            Assert.Equal(0.91, result.MilesPerRider, 2); // 50 / 55 â‰ˆ 0.91            Assert.True(result.EfficiencyScore > 0);        }        #endregion        #region Cost Per Student Metrics Tests        [Fact]        public async Task CalculateCostPerStudentMetricsAsync_WithValidDateRange_ShouldReturnMetrics()        {            // Arrange            var startDate = DateTime.Today.AddDays(-7);            var endDate = DateTime.Today;            // Act            var result = await _analyticsService.CalculateCostPerStudentMetricsAsync(startDate, endDate);            // Assert            Assert.NotNull(result);            Assert.Equal(startDate, result.StartDate);            Assert.Equal(endDate, result.EndDate);            Assert.True(result.TotalRouteStudentDays >= 0);            Assert.True(result.TotalRouteCosts >= 0);            Assert.True(result.RouteCostPerStudentPerDay >= 0);        }        [Fact]        public async Task CalculateCostPerStudentMetricsAsync_WithNoData_ShouldReturnZeroCosts()        {            // Arrange - Use future dates with no data            var startDate = DateTime.Today.AddYears(1);            var endDate = DateTime.Today.AddYears(1).AddDays(7);            // Act            var result = await _analyticsService.CalculateCostPerStudentMetricsAsync(startDate, endDate);            // Assert            Assert.NotNull(result);            Assert.Equal(0, result.TotalRouteStudentDays);            Assert.Equal(0, result.TotalRouteCosts);            Assert.Equal(0, result.RouteCostPerStudentPerDay);        }        #endregion        #region Route Efficiency Metrics Range Tests        [Fact]        public async Task GetRouteEfficiencyMetricsAsync_WithValidDateRange_ShouldReturnMetrics()        {            // Arrange            var startDate = DateTime.Today.AddDays(-7);            var endDate = DateTime.Today;            // Act            var result = await _analyticsService.GetRouteEfficiencyMetricsAsync(startDate, endDate);            // Assert            Assert.NotNull(result);            Assert.IsType<List<RouteEfficiencyMetrics>>(result);            // Note: May be empty if no routes exist in test database        }        [Fact]        public async Task GetRouteEfficiencyMetricsAsync_WithSingleDay_ShouldHandleCorrectly()        {            // Arrange            var singleDate = DateTime.Today;            // Act            var result = await _analyticsService.GetRouteEfficiencyMetricsAsync(singleDate, singleDate);            // Assert            Assert.NotNull(result);            Assert.IsType<List<RouteEfficiencyMetrics>>(result);        }        #endregion        #region Route Optimization Tests        [Fact]        public async Task AnalyzeRouteOptimizationsAsync_WithValidDate_ShouldReturnSuggestions()        {            // Arrange            var testDate = DateTime.Today;            // Act            var result = await _analyticsService.AnalyzeRouteOptimizationsAsync(testDate);            // Assert            Assert.NotNull(result);            Assert.IsType<List<RouteOptimizationSuggestion>>(result);            // Note: May be empty if no inefficient routes exist        }        #endregion        #region Driver Performance Tests        [Fact]        public async Task CalculateDriverPerformanceAsync_WithValidDriver_ShouldReturnMetrics()        {            // Arrange            var DriverId = 1; // Assuming driver with ID 1 exists            var startDate = DateTime.Today.AddDays(-30);            var endDate = DateTime.Today;            try            {                // Act                var result = await _analyticsService.CalculateDriverPerformanceAsync(DriverId, startDate, endDate);                // Assert                Assert.NotNull(result);                Assert.Equal(DriverId, result.DriverId);                Assert.True(result.TotalRoutes >= 0);                Assert.True(result.TotalMiles >= 0);                Assert.True(result.TotalRiders >= 0);            }            catch (ArgumentException ex)            {                // Expected if driver doesn't exist in test database                Assert.Contains("not found", ex.Message);            }        }        [Fact]        public async Task CalculateDriverPerformanceAsync_WithNonExistentDriver_ShouldThrowException()        {            // Arrange            var nonExistentDriverId = 99999;            var startDate = DateTime.Today.AddDays(-7);            var endDate = DateTime.Today;            // Act & Assert            await Assert.ThrowsAsync<ArgumentException>(() =>                _analyticsService.CalculateDriverPerformanceAsync(nonExistentDriverId, startDate, endDate));        }        #endregion        #region Fleet Analytics Tests        [Fact]        public async Task GetFleetAnalyticsSummaryAsync_WithValidDateRange_ShouldReturnSummary()        {            // Arrange            var startDate = DateTime.Today.AddDays(-7);            var endDate = DateTime.Today;            // Act            var result = await _analyticsService.GetFleetAnalyticsSummaryAsync(startDate, endDate);            // Assert            Assert.NotNull(result);            Assert.Equal(startDate, result.PeriodStart);            Assert.Equal(endDate, result.PeriodEnd);            Assert.True(result.TotalRoutes >= 0);            Assert.True(result.TotalMiles >= 0);            Assert.True(result.TotalRiders >= 0);            Assert.True(result.VehicleUtilizationRate >= 0);            Assert.True(result.VehicleUtilizationRate <= 100);        }        #endregion        #region Route Efficiency Score Tests        [Fact]        public void GetRouteEfficiency_WithValidRouteId_ShouldReturnScore()        {            // Arrange - Create test data with proper references            var vehicleRepo = new BusRepository();            var driverRepo = new DriverRepository();            var testBus = new Bus {                BusNumber = $"TEST{DateTime.Now.Ticks}",                Make = "Test",                Model = "Test",                Year = 2020,                SeatingCapacity = 35,                FuelType = "Diesel",                Status = "Active"            };            var busId = vehicleRepo.AddBus(testBus);            var testDriver = new Driver            {                Name = $"Test Driver{DateTime.Now.Ticks}",                FirstName = "Test",                LastName = "Driver",                DriversLicenseType = "CDL",                IsTrainingComplete = true,                Status = "Active"            };            var DriverId = driverRepo.AddDriver(testDriver);            var testRoute = CreateTestRoute(busId, DriverId);            var RouteId = _routeRepository.AddRoute(testRoute);            _testRouteIds.Add(RouteId);            // Act            var result = _analyticsService.GetRouteEfficiency(RouteId);            // Assert            Assert.True(result >= 0);            Assert.True(result <= 100);        }        [Fact]        public void GetRouteEfficiency_WithNonExistentRouteId_ShouldReturnZero()        {            // Act            var result = _analyticsService.GetRouteEfficiency(99999);            // Assert            Assert.Equal(0, result);        }        #endregion        #region Edge Case Tests        [Theory]        [InlineData(0, 0)] // No miles, no riders        [InlineData(100, 0)] // Miles but no riders        [InlineData(0, 50)] // Riders but no miles        public void CalculateRouteEfficiency_WithEdgeCases_ShouldHandleGracefully(int totalMiles, int totalRiders)        {            // Arrange            var testRoute = CreateTestRoute();            if (totalMiles > 0)            {                testRoute.AMBeginMiles = 0;                testRoute.AMEndMiles = totalMiles;            }            testRoute.AMRiders = totalRiders;            // Act            var result = _analyticsService.CalculateRouteEfficiency(testRoute);            // Assert            if (totalMiles == 0 && totalRiders == false)            {                // Service should handle edge cases gracefully - may return result with zero efficiency                Assert.NotNull(result);                Assert.True(result.EfficiencyScore >= 0, "Efficiency score should be non-negative");            }            else            {                Assert.NotNull(result);                Assert.True(result.EfficiencyScore >= 0);                Assert.True(result.EfficiencyScore <= 100);            }        }        #endregion        #region Helper Methods        private Route CreateTestRoute(int busId = 0, int DriverId = 0)        {            var timestamp = DateTime.Now.Ticks;            return new Route            {                RouteId = 0, // Will be set by database                RouteName = $"Test Route {timestamp}",                Date = DateTime.Today.ToString("yyyy-MM-dd"),                AMBeginMiles = 100,                AMEndMiles = 125,                AMRiders = 30,                AMbusId = busId > 0 ? busId : 1,                AMDriverId = DriverId > 0 ? DriverId : 1,                PMBeginMiles = 125,                PMEndMiles = 150,                PMRiders = 25,                PMbusId = busId > 0 ? busId : 1,                PMDriverId = DriverId > 0 ? DriverId : 1            };        }        #endregion    }}

