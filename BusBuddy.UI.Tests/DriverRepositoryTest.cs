using System;using System.Collections.Generic;using System.Linq;using Xunit;using BusBuddy.Data;using BusBuddy.Models;namespace BusBuddy.UI.Tests{    /// <summary>    /// Tests for DriverRepository ensuring proper CRUD operations and data integrity.    /// Tests cover database operations, validation, and error handling.    /// </summary>    [Trait("Category", "Repository")]    public class DriverRepositoryTest : IDisposable    {        private readonly DriverRepository _repository;        private readonly List<int> _testDriverIds;        public DriverRepositoryTest()        {            _repository = new DriverRepository();            _testDriverIds = new List<int>();        }        public void Dispose()        {            // Cleanup test drivers            foreach (var id in _testDriverIds)            {                try                {                    _repository.DeleteDriver(id);                }                catch                {                    // Ignore cleanup errors                }            }        }        [Fact]        public void GetAllDrivers_ShouldReturnListOfDrivers()        {            // Act            var drivers = _repository.GetAllDrivers();            // Assert            Assert.NotNull(drivers);            Assert.IsType<List<Driver>>(drivers);        }        [Fact]        public void AddDriver_WithValidData_ShouldReturnDriverId()        {            // Arrange            var driver = new Driver            {                FirstName = "Test",                LastName = "Driver",                DriverEmail = "TEST123",                CDLExpirationDate = DateTime.Now.Date            };            // Act            var DriverId = _repository.AddDriver(driver);            _testDriverIds.Add(DriverId);            // Assert            Assert.True(DriverId > 0);        }        [Fact]        public void GetDriverById_WithValidId_ShouldReturnDriver()        {            // Arrange            var driver = new Driver            {                FirstName = "Test",                LastName = "Driver",                DriverEmail = "TEST456",                CDLExpirationDate = DateTime.Now.Date            };            var DriverId = _repository.AddDriver(driver);            _testDriverIds.Add(DriverId);            // Act            var retrievedDriver = _repository.GetDriverById(DriverId);            // Assert            Assert.NotNull(retrievedDriver);            Assert.Equal(DriverId, retrievedDriver.DriverId);            Assert.Equal("Test", retrievedDriver.FirstName);        }    }}

