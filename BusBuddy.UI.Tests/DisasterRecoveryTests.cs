using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Threading.Tasks;using Xunit;using Xunit.Abstractions;using BusBuddy.Models;using BusBuddy.Data;namespace BusBuddy.UI.Tests{    /// <summary>    /// Disaster recovery and backup tests validating data protection, backup procedures, and system recovery capabilities.    /// Tests ensure business continuity and data integrity in failure scenarios.    /// </summary>    public class DisasterRecoveryTests : SystemTestBase    {        private readonly ITestOutputHelper _output;        public DisasterRecoveryTests(ITestOutputHelper output)        {            _output = output;        }        #region Data Backup Tests        [Fact]        public void DataBackup_Creation_ShouldPreserveIntegrity()        {            _output.WriteLine("Testing data backup creation and integrity...");            // Create test data to backup            var testDataSet = CreateComprehensiveTestDataSet();            _output.WriteLine($"Created test dataset: {testDataSet.VehicleCount} vehicles, {testDataSet.DriverCount} drivers, {testDataSet.RouteCount} routes");            // Simulate backup creation by exporting data            var backupData = new            {                BackupDate = DateTime.UtcNow,                busData = BusRepository.GetAllBuses()?.Where(v => v.BusNumber?.Contains("_BackupTest") == true).ToList(),                DriverData = DriverRepository.GetAllDrivers()?.Where(d => d.Name?.Contains("_BackupTest") == true).ToList(),                RouteData = RouteRepository.GetAllRoutes()?.Where(r => r.RouteName?.Contains("_BackupTest") == true).ToList()            };            // Verify backup completeness            Assert.NotNull(backupData.busData);            Assert.NotNull(backupData.DriverData);            Assert.NotNull(backupData.RouteData);            Assert.True(backupData.busData.Count >= testDataSet.VehicleCount,                $"Backup should contain at least {testDataSet.VehicleCount} vehicles");            Assert.True(backupData.DriverData.Count >= testDataSet.DriverCount,                $"Backup should contain at least {testDataSet.DriverCount} drivers");            // Verify data integrity in backup            foreach (var Bus in backupData.busData)            {                Assert.False(string.IsNullOrEmpty(bus.BusNumber), "Bus number should be preserved");                Assert.False(string.IsNullOrEmpty(bus.Make), "Bus make should be preserved");                Assert.False(string.IsNullOrEmpty(bus.Status), "Bus status should be preserved");            }            foreach (var driver in backupData.DriverData)            {                Assert.False(string.IsNullOrEmpty(driver.Name), "Driver name should be preserved");                Assert.False(string.IsNullOrEmpty(driver.Status), "Driver status should be preserved");            }            _output.WriteLine("✅ Data backup creation and integrity test PASSED");        }        [Fact]        public void DataRestore_Process_ShouldRecoverData()        {            _output.WriteLine("Testing data restore process...");            // Create original data            var originalBus = CreateTestVehicle("_RestoreTest_Original");            var originalDriver = CreateTestDriver("_RestoreTest_Original");            var originalbusId = BusRepository.AddBus(originalBus);            var originalDriverId = DriverRepository.AddDriver(originalDriver);            TestbusIds.Add(originalbusId);            TestDriverIds.Add(originalDriverId);            // Verify original data exists            var preRestoreBus = BusRepository.GetBusById(originalbusId);            var preRestoreDriver = DriverRepository.GetDriverById(originalDriverId);            Assert.NotNull(preRestoreBus);            Assert.NotNull(preRestoreDriver);            // Simulate data corruption/loss by modifying data            preRestoreBus.Status = "CORRUPTED";            preRestoreDriver.Status = "CORRUPTED";            BusRepository.UpdateBus(preRestoreBus);            DriverRepository.UpdateDriver(preRestoreDriver);            // Verify corruption            var corruptedBus = BusRepository.GetBusById(originalbusId);            var corruptedDriver = DriverRepository.GetDriverById(originalDriverId);            Assert.NotNull(corruptedBus);            Assert.NotNull(corruptedDriver);            Assert.Equal("CORRUPTED", corruptedBus.Status);            Assert.Equal("CORRUPTED", corruptedDriver.Status);            // Simulate restore process by reverting to original values            var restoredBus = originalBus;            restoredBus.busId = originalbusId;            restoredBus.Status = "Active"; // Restore original status            var restoredDriver = originalDriver;            restoredDriver.DriverId = originalDriverId;            restoredDriver.Status = "Active"; // Restore original status            BusRepository.UpdateBus(restoredBus);            DriverRepository.UpdateDriver(restoredDriver);            // Verify restore success            var finalBus = BusRepository.GetBusById(originalbusId);            var finalDriver = DriverRepository.GetDriverById(originalDriverId);            Assert.NotNull(finalBus);            Assert.NotNull(finalDriver);            Assert.Equal("Active", finalBus.Status);            Assert.Equal("Active", finalDriver.Status);            Assert.Equal(originalBus.BusNumber, finalBus.BusNumber);            Assert.Equal(originalDriver.Name, finalDriver.Name);            _output.WriteLine("✅ Data restore process test PASSED");        }        #endregion        #region System Recovery Tests        [Fact]        public void SystemFailure_Recovery_ShouldMaintainDataConsistency()        {            _output.WriteLine("Testing system failure recovery and data consistency...");            // Create a batch of operations to simulate during "failure"            var preFailureData = new List<(string Type, int Id, string Description)>();            // Create initial data            for (int i = 0; i < 5; i++)            {                var testBus = CreateTestVehicle($"_FailureTest_{i}");                var busId = BusRepository.AddBus(bus);                TestbusIds.Add(busId);                preFailureData.Add(("bus", busId, $"Bus {bus.BusNumber}"));            }            for (int i = 0; i < 3; i++)            {                var driver = CreateTestDriver($"_FailureTest_{i}");                var DriverId = DriverRepository.AddDriver(driver);                TestDriverIds.Add(DriverId);                preFailureData.Add(("Driver", DriverId, $"Driver {driver.Name}"));            }            _output.WriteLine($"Created {preFailureData.Count} records before simulated failure");            // Simulate system failure during transaction by attempting invalid operations            var failureOperations = new List<string>();            try            {                // Attempt operations that might fail                var invalidBus = CreateTestVehicle("_Invalid");                invalidBus.BusNumber = null; // This might cause a failure                BusRepository.AddBus(invalidBus);                failureOperations.Add("Invalid Bus creation attempted");            }            catch (Exception ex)            {                failureOperations.Add($"Expected failure: {ex.GetType().Name}");            }            try            {                // Attempt to update non-existent record                var nonExistentBus = CreateTestVehicle("_NonExistent");                nonExistentBus.busId = -999;                BusRepository.UpdateBus(nonExistentBus);                failureOperations.Add("Non-existent Bus update attempted");            }            catch (Exception ex)            {                failureOperations.Add($"Expected failure: {ex.GetType().Name}");            }            // Verify data consistency after simulated failures            foreach (var (type, id, description) in preFailureData)            {                if (type == "bus")                {                    var testBus = BusRepository.GetBusById(id);                    Assert.NotNull(bus);                    Assert.Equal("Active", bus.Status); // Should remain unchanged                }                else if (type == "Driver")                {                    var driver = DriverRepository.GetDriverById(id);                    Assert.NotNull(driver);                    Assert.Equal("Active", driver.Status); // Should remain unchanged                }            }            _output.WriteLine($"Simulated {failureOperations.Count} failure scenarios");            _output.WriteLine("✅ System failure recovery and data consistency test PASSED");        }        [Fact]        public async Task ConcurrentFailure_Recovery_ShouldPreventDataCorruption()        {            _output.WriteLine("Testing concurrent failure recovery...");            var testBus = CreateTestVehicle("_ConcurrentFailure");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            var tasks = new List<Task>();            var results = new List<(bool Success, string Operation, Exception Error)>();            var lockObject = new object();            // Simulate concurrent operations that might fail            for (int i = 0; i < 10; i++)            {                var operationId = i;                tasks.Add(Task.Run(async () =>                {                    try                    {                        // Each task attempts different operations                        if (operationId % 3 == false)                        {                            // Update Bus status                            var v = BusRepository.GetBusById(busId);                            if (v != null)                            {                                v.Status = $"Updated_by_Op_{operationId}";                                BusRepository.UpdateBus(v);                            }                            lock (lockObject)                            {                                results.Add((true, $"Update_{operationId}", null!));                            }                        }                        else if (operationId % 3 == true)                        {                            // Read Bus data                            var v = BusRepository.GetBusById(busId);                            Assert.NotNull(v);                            lock (lockObject)                            {                                results.Add((true, $"Read_{operationId}", null!));                            }                        }                        else                        {                            // Attempt invalid operation                            BusRepository.GetBusById(-999);                            lock (lockObject)                            {                                results.Add((true, $"Invalid_{operationId}", null!));                            }                        }                        await Task.Delay(10); // Small delay to increase contention                    }                    catch (Exception ex)                    {                        lock (lockObject)                        {                            results.Add((false, $"Operation_{operationId}", ex));                        }                    }                }));            }            await Task.WhenAll(tasks);            // Analyze results            var successCount = results.Count(r => r.Success);            var failureCount = results.Count(r => !r.Success);            _output.WriteLine($"Concurrent operations: {successCount} succeeded, {failureCount} failed");            // Verify final data integrity            var finalBus = BusRepository.GetBusById(busId);            Assert.NotNull(finalBus);            Assert.False(string.IsNullOrEmpty(finalBus.BusNumber));            // At least some operations should have succeeded            Assert.True(successCount > 0, "Some operations should succeed even under concurrent stress");            _output.WriteLine("✅ Concurrent failure recovery test PASSED");        }        #endregion        #region Business Continuity Tests        [Fact]        public void CriticalOperations_Availability_ShouldBeMaintained()        {            _output.WriteLine("Testing critical operations availability...");            // Define critical business operations that must always be available            var criticalOperations = new Dictionary<string, Func<bool>>            {                ["Bus Lookup"] = () =>                {                    try                    {                        var vehicles = BusRepository.GetAllBuses();                        return vehicles != null;                    }                    catch { return false; }                },                ["Driver Lookup"] = () =>                {                    try                    {                        var drivers = DriverRepository.GetAllDrivers();                        return drivers != null;                    }                    catch { return false; }                },                ["Route Information"] = () =>                {                    try                    {                        var routes = RouteRepository.GetAllRoutes();                        return routes != null;                    }                    catch { return false; }                },                ["Bus Status Check"] = () =>                {                    try                    {                        if (TestbusIds.Any())                        {                            var testBus = BusRepository.GetBusById(TestbusIds.First());                            return Bus != null;                        }                        return true; // No test data available, assume success                    }                    catch { return false; }                },                ["Emergency Contact Access"] = () =>                {                    try                    {                        if (TestDriverIds.Any())                        {                            var driver = DriverRepository.GetDriverById(TestDriverIds.First());                            return driver != null && !string.IsNullOrEmpty(driver.DriverPhone);                        }                        return true; // No test data available, assume success                    }                    catch { return false; }                }            };            var operationResults = new Dictionary<string, bool>();            // Test each critical operation            foreach (var operation in criticalOperations)            {                var startTime = DateTime.UtcNow;                var success = operation.Value();                var duration = DateTime.UtcNow - startTime;                operationResults[operation.Key] = success;                _output.WriteLine($"{operation.Key}: {(success ? "✅ Available" : "❌ Failed")} ({duration.TotalMilliseconds:F2}ms)");                // Critical operations should complete quickly                Assert.True(duration.TotalSeconds < 5, $"{operation.Key} should complete within 5 seconds");            }            // All critical operations should be available            var availableCount = operationResults.Values.Count(available => available);            var totalCount = operationResults.Count;            Assert.True(availableCount == totalCount,                $"All critical operations should be available: {availableCount}/{totalCount}");            _output.WriteLine("✅ Critical operations availability test PASSED");        }        [Fact]        public void ServiceDegradation_GracefulHandling_ShouldWork()        {            _output.WriteLine("Testing graceful service degradation...");            // Create test data            var testBus = CreateTestVehicle("_ServiceDegradation");            var busId = BusRepository.AddBus(bus);            TestbusIds.Add(busId);            // Test various degradation scenarios            var degradationTests = new[]            {                new { Name = "Slow Database Response", Test = (Func<bool>)(() =>                {                    // Simulate slow response by adding delay                    Task.Delay(100).Wait();                    var result = BusRepository.GetBusById(busId);                    return result != null;                })},                new { Name = "Limited Connectivity", Test = (Func<bool>)(() =>                {                    // Test basic operations still work                    var vehicles = BusRepository.GetAllBuses();                    return vehicles != null && vehicles.Count > 0;                })},                new { Name = "High Load Conditions", Test = (Func<bool>)(() =>                {                    // Perform multiple operations quickly                    var tasks = new List<Task<Bus?>>();                    for (int i = 0; i < 5; i++)                    {                        tasks.Add(Task.Run(() => BusRepository.GetBusById(busId)));                    }                    var results = Task.WhenAll(tasks).Result;                    return results.All(r => r != null);                })},                new { Name = "Partial Service Failure", Test = (Func<bool>)(() =>                {                    // Test that other services continue working even if one fails                    try                    {                        // Attempt invalid operation                        BusRepository.GetBusById(-999);                    }                    catch                    {                        // Ignore expected failure                    }                    // Verify valid operations still work                    var validBus = BusRepository.GetBusById(busId);                    return validBus != null;                })}            };            var degradationResults = new List<(string Name, bool Success, TimeSpan Duration)>();            foreach (var test in degradationTests)            {                var startTime = DateTime.UtcNow;                try                {                    var success = test.Test();                    var duration = DateTime.UtcNow - startTime;                    degradationResults.Add((test.Name, success, duration));                    _output.WriteLine($"{test.Name}: {(success ? "✅ Handled" : "❌ Failed")} ({duration.TotalMilliseconds:F2}ms)");                }                catch (Exception ex)                {                    var duration = DateTime.UtcNow - startTime;                    degradationResults.Add((test.Name, false, duration));                    _output.WriteLine($"{test.Name}: ❌ Exception - {ex.GetType().Name}");                }            }            // Most degradation scenarios should be handled gracefully            var handledCount = degradationResults.Count(r => r.Success);            var successRate = (double)handledCount / degradationResults.Count;            Assert.True(successRate >= 0.75, $"At least 75% of degradation scenarios should be handled gracefully: {successRate:P}");            _output.WriteLine("✅ Graceful service degradation test PASSED");        }        #endregion        #region Data Integrity Validation Tests        [Fact]        public void DataIntegrity_Validation_ShouldDetectCorruption()        {            _output.WriteLine("Testing data integrity validation...");            // Create test data with known checksums            var integrityTestData = new[]            {                CreateTestVehicle("_Integrity_1"),                CreateTestVehicle("_Integrity_2"),                CreateTestVehicle("_Integrity_3")            };            var busIds = new List<int>();            var originalChecksums = new Dictionary<int, string>();            // Store original data and calculate checksums            foreach (var Bus in integrityTestData)            {                var busId = BusRepository.AddBus(bus);                busIds.Add(busId);                TestbusIds.Add(busId);                var checksum = CalculateVehicleChecksum(bus);                originalChecksums[busId] = checksum;            }            // Verify initial integrity            foreach (var busId in busIds)            {                var testBus = BusRepository.GetBusById(busId);                Assert.NotNull(bus);                var currentChecksum = CalculateVehicleChecksum(bus);                Assert.Equal(originalChecksums[busId], currentChecksum);            }            // Simulate data corruption            var corruptedBus = BusRepository.GetBusById(busIds[0]);            Assert.NotNull(corruptedBus);            corruptedTestBusVIN = "CORRUPTED_VIN";            BusRepository.UpdateBus(corruptedBus);            // Detect corruption            var corruptedChecksum = CalculateVehicleChecksum(corruptedBus);            Assert.NotEqual(originalChecksums[busIds[0]], corruptedChecksum);            // Verify other records remain intact            for (int i = 1; i < busIds.Count; i++)            {                var testBus = BusRepository.GetBusById(busIds[i]);                Assert.NotNull(bus);                var checksum = CalculateVehicleChecksum(bus);                Assert.Equal(originalChecksums[busIds[i]], checksum);            }            _output.WriteLine("✅ Data integrity validation test PASSED");        }        #endregion        #region Helper Methods        private (int VehicleCount, int DriverCount, int RouteCount) CreateComprehensiveTestDataSet()        {            var vehicleCount = 0;            var driverCount = 0;            var routeCount = 0;            // Create vehicles            for (int i = 0; i < 10; i++)            {                var testBus = CreateTestVehicle($"_BackupTest_{i}");                var busId = BusRepository.AddBus(bus);                TestbusIds.Add(busId);                vehicleCount++;            }            // Create drivers            for (int i = 0; i < 8; i++)            {                var driver = CreateTestDriver($"_BackupTest_{i}");                var DriverId = DriverRepository.AddDriver(driver);                TestDriverIds.Add(DriverId);                driverCount++;            }            // Create routes            for (int i = 0; i < Math.Min(vehicleCount, driverCount); i++)            {                var route = CreateTestRoute(TestbusIds[i], TestDriverIds[i], $"_BackupTest_{i}");                var RouteId = RouteRepository.AddRoute(route);                TestRouteIds.Add(RouteId);                routeCount++;            }            return (vehicleCount, driverCount, routeCount);        }        private string CalculateVehicleChecksum(Bus bus)        {            var data = $"{bus.BusNumber}|{bus.Make}|{bus.Model}|{bus.Year}|{bus.VIN}|{bus.Status}|{bus.SeatingCapacity}";            return data.GetHashCode().ToString("X");        }        #endregion    }}

