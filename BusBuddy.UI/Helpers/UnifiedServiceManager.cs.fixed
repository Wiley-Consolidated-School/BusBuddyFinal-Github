using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
// Add SQL Server specific namespace
using Microsoft.Data.SqlClient;
using BusBuddy.Data;

namespace BusBuddy.UI.Helpers
{
    public class UnifiedServiceManager
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly IServiceCollection _services;
        private static UnifiedServiceManager _instance;

        private UnifiedServiceManager()
        {
            _services = new ServiceCollection();
            ConfigureServices(_services);
            _serviceProvider = _services.BuildServiceProvider();
        }

        public static UnifiedServiceManager Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new UnifiedServiceManager();
                }
                return _instance;
            }
        }

        // Use explicit notnull constraint to fix warnings
        public T GetService<T>() where T : class
        {
            // Use explicit namespace to resolve ambiguity
            return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                .GetService<T>(_serviceProvider);
        }

        // Use explicit notnull constraint to fix warnings
        public T GetRequiredService<T>() where T : notnull
        {
            // Use explicit namespace to resolve ambiguity
            return Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                .GetRequiredService<T>(_serviceProvider);
        }

        private void ConfigureServices(IServiceCollection services)
        {
            // Register database context
            string connectionString = GetConnectionString();
            services.AddDbContext<BusBuddyContext>(options =>
            {
                // Use SqlServer with standard options
                options.UseSqlServer(connectionString);
            });

            // Configure options builder with retry capabilities
            var optionsBuilder = new DbContextOptionsBuilder<BusBuddyContext>();

            // Use SqlServer without EnableRetryOnFailure for now - will be addressed separately
            optionsBuilder.UseSqlServer(connectionString);

            // Add navigation service with explicit interface to resolve ambiguity
            services.AddScoped<INavigationService>(provider =>
                new NavigationService(
                    Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                        .GetService<IFormFactory>(provider)));

            // Use fully qualified names to resolve ambiguity
            services.AddScoped<BusBuddy.UI.Services.IDatabaseHelperService,
                               BusBuddy.UI.Services.DatabaseHelperService>();

            // Register route service with explicit service references
            services.AddScoped<IRouteService>(provider => new RouteService(
                Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                    .GetService<BusBuddy.UI.Services.IDatabaseHelperService>(provider),
                Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                    .GetService<HttpClient>(provider)));

            // Register route analytics service with explicit service references
            services.AddScoped<IRouteAnalyticsService>(provider => new RouteAnalyticsService(
                Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                    .GetService<BusBuddy.Business.IDatabaseHelperService>(provider),
                Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                    .GetService<BusBuddy.Business.IRouteAnalyticsService>(provider)));

            services.AddHttpClient();
        }

        private string GetConnectionString()
        {
            // Default connection string for development
            return "Server=(localdb)\\mssqllocaldb;Database=BusBuddyTest;Trusted_Connection=True;";
        }

        public async Task InitializeDatabaseAsync()
        {
            using (var scope = _serviceProvider.CreateScope())
            {
                var context = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
                    .GetRequiredService<BusBuddyContext>(scope.ServiceProvider);

                // Ensure database is created
                await context.Database.EnsureCreatedAsync();
            }
        }
    }
}
