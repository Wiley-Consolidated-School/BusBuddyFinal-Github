name: .NET Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Allow manual triggering

# Add permissions for test reporting
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

# Environment variables used across multiple jobs
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_VERSION: 8.0.x
  OS: windows-latest

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better versioning
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    # Simplified SQLite setup - embedded SQLite works for tests
    - name: Setup SQLite (Optional)
      run: |
        Write-Host "Checking SQLite availability..."
        Write-Host "Note: Tests use embedded SQLite and will work without system SQLite"
        # Optional: Try to install SQLite if needed for development
        try {
          if (Get-Command sqlite3 -ErrorAction SilentlyContinue) {
            Write-Host "✓ SQLite already available"
          } else {
            Write-Host "SQLite not found, but tests will use embedded version"
          }
        }
        catch {
          Write-Host "SQLite check completed - using embedded SQLite for tests"
        }
        
    - name: List repository contents
      run: |
        Write-Host "Repository contents:"
        Get-ChildItem -Force | Format-Table -AutoSize
        if (Test-Path "BusBuddy.sln") { 
          Write-Host "✓ Solution file found in root" 
        } else { 
          Write-Host "✗ Solution file not found in root, searching subdirectories..."
          Get-ChildItem -Recurse -Filter "*.sln" | ForEach-Object { Write-Host "Found: $($_.FullName)" }
        }
          - name: Find solution file
      id: find-solution
      run: |
        # First check root directory
        if (Test-Path "BusBuddy.sln") {
          $solutionPath = (Resolve-Path "BusBuddy.sln").Path
          Write-Host "✓ Solution file found in root: $solutionPath"
          "SOLUTION_PATH=BusBuddy.sln" >> $env:GITHUB_ENV
          "solution_path=BusBuddy.sln" >> $env:GITHUB_OUTPUT
        } else {
          # Search for any .sln file as fallback
          $solutionFiles = Get-ChildItem -Filter "*.sln" -Recurse | Select-Object -First 1
          if ($solutionFiles) {
            $solutionPath = $solutionFiles.FullName
            Write-Host "✓ Solution file found at: $solutionPath"
            "SOLUTION_PATH=$($solutionFiles.Name)" >> $env:GITHUB_ENV
            "solution_path=$($solutionFiles.Name)" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "✗ No solution file found in the repository"
            Write-Host "Repository structure:"
            Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*.sln" -or $_ -like "*.csproj" } | ForEach-Object { Write-Host "  - $_" }
            exit 1
          }
        }
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: dotnet restore $env:SOLUTION_PATH
      
    - name: Build
      run: dotnet build $env:SOLUTION_PATH --no-restore --configuration Release
    
    # Create TestResults directory to ensure it exists
    - name: Create TestResults directory
      run: |
        if (-not (Test-Path "TestResults")) {
          New-Item -ItemType Directory -Path "TestResults"
          Write-Host "Created TestResults directory"
        } else {
          Write-Host "TestResults directory already exists"
        }
        
    # Run tests with proper TRX generation and error handling
    - name: Run tests
      run: |
        Write-Host "Running tests with TRX output..."
        
        # Ensure TestResults directory exists
        if (-not (Test-Path "TestResults")) {
          New-Item -ItemType Directory -Path "TestResults" -Force
        }
          # Run tests with comprehensive output
        $testArgs = @(
          "test", $env:SOLUTION_PATH,
          "--configuration", "Release",
          "--verbosity", "normal",
          "--logger", "trx;LogFileName=test-results.trx",
          "--results-directory", "TestResults",
          "--collect:XPlat Code Coverage"
        )
        
        # Add runsettings if available
        if (Test-Path "coverlet.runsettings") {
          $testArgs += @("--settings", "coverlet.runsettings")
          Write-Host "Using coverlet.runsettings for code coverage configuration"
        }
        
        & dotnet @testArgs
        
        # Verify and report on generated files
        Write-Host "`n📁 TestResults directory contents:"
        if (Test-Path "TestResults") {
          Get-ChildItem "TestResults" -Recurse | ForEach-Object {
            $relativePath = $_.FullName.Replace((Get-Location).Path, "").TrimStart('\')
            Write-Host "  $relativePath"
          }
        }
        
        # Verify TRX files specifically
        $trxFiles = Get-ChildItem "TestResults" -Filter "*.trx" -Recurse
        if ($trxFiles) {
          Write-Host "`n✅ TRX files found:"
          $trxFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Host "`n⚠️  No TRX files found - test reporting may be affected"
        }
        
        # Verify coverage files
        $coverageFiles = Get-ChildItem "TestResults" -Filter "coverage.cobertura.xml" -Recurse
        if ($coverageFiles) {
          Write-Host "`n✅ Coverage files found:"
          $coverageFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }
        } else {
          Write-Host "`n⚠️  No coverage files found"
        }
        
    # Upload test results as artifacts (always runs)
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/
        retention-days: 30
          # Generate test report (only if we have TRX files)
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: XUnit Tests
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: false
        fail-on-empty: false
        
    # Upload coverage reports
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: TestResults/**/coverage.cobertura.xml
        retention-days: 30      # Code coverage reporting with token validation  
    - name: Upload coverage to Codecov
      if: always() && github.actor != 'dependabot[bot]'
      uses: codecov/codecov-action@v4
      with:
        files: TestResults/**/coverage.cobertura.xml
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests,integration
        name: codecov-umbrella
        env_vars: OS,DOTNET_VERSION
      continue-on-error: true
      
    # Coverage summary for reference
    - name: Coverage Summary
      if: always()
      run: |
        Write-Host "📊 Coverage files generated:"
        if (Test-Path "TestResults") {
          Get-ChildItem "TestResults" -Recurse -Filter "*.xml" | ForEach-Object { 
            Write-Host "  - $($_.Name) ($($_.Length) bytes)"
          }
        }
        Write-Host ""
        Write-Host "💡 To configure Codecov uploads:"
        Write-Host "   1. Get token from https://codecov.io/gh/your-org/your-repo/settings"
        Write-Host "   2. Add CODECOV_TOKEN secret in repository Settings > Secrets"
        
  # Separate job for deployment readiness checks
  deployment-check:
    runs-on: windows-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x        
    - name: Build Release version
      run: |
        dotnet restore BusBuddy.sln
        dotnet build BusBuddy.sln --configuration Release --no-restore
        
    - name: Create deployment package
      run: |
        dotnet publish --configuration Release --output ./deploy/
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deploy/
        retention-days: 7
