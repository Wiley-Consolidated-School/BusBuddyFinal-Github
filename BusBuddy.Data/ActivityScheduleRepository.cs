using System;using System.Collections.Generic;using System.Data;using BusBuddy.Models;using Dapper;namespace BusBuddy.Data{    public class ActivityScheduleRepository : BaseRepository, IActivityScheduleRepository    {        public ActivityScheduleRepository() : base()        {        }        public List<ActivitySchedule> GetAllScheduledActivities()        {            try            {                using (var connection = CreateConnection())                {                    connection.Open();                    var schedules = connection.Query<ActivitySchedule>(@"                        SELECT                            ScheduleID,                            Date AS Date,                            ActivityName,                            StartTime,                            EndTime,                            VehicleID,                            DriverID,                            Notes,                            CalendarID                        FROM ActivitySchedule").AsList();                    return schedules;                }            }            catch (Exception ex)            {                Console.WriteLine($"Database not available: {ex.Message}. Returning sample data.");                return new List<ActivitySchedule>                {                    new ActivitySchedule { ScheduleID = 1, ActivityName = "Field Trip", Date = DateTime.Today, StartTime = TimeSpan.FromHours(9), EndTime = TimeSpan.FromHours(15) },                    new ActivitySchedule { ScheduleID = 2, ActivityName = "Sports Trip", Date = DateTime.Today.AddDays(2), StartTime = TimeSpan.FromHours(8.5), EndTime = TimeSpan.FromHours(17) },                    new ActivitySchedule { ScheduleID = 3, ActivityName = "Academic Trip", Date = DateTime.Today.AddDays(5), StartTime = TimeSpan.FromHours(8), EndTime = TimeSpan.FromHours(16.5) }                };            }        }        public ActivitySchedule GetScheduledActivityById(int id)        {            using (var connection = CreateConnection())            {                connection.Open();                return connection.QuerySingleOrDefault<ActivitySchedule>(@"                    SELECT                        ScheduleID,                        Date AS Date,                        ActivityName,                        StartTime,                        EndTime,                        VehicleID,                        DriverID,                        Notes,                        CalendarID                    FROM ActivitySchedule WHERE ScheduleID = @ScheduleID",                    new { ScheduleID = id });            }        }        public List<ActivitySchedule> GetScheduledActivitiesByDate(DateTime date)        {            using (var connection = CreateConnection())            {                connection.Open();                var scheduledActivities = connection.Query<ActivitySchedule>(@"                    SELECT                        ScheduleID,                        Date AS Date,                        ActivityName,                        StartTime,                        EndTime,                        VehicleID,                        DriverID,                        Notes,                        CalendarID                    FROM ActivitySchedule WHERE Date = @Date",                    new { Date = date }).AsList();                return scheduledActivities;            }        }        public List<ActivitySchedule> GetScheduledActivitiesByDriver(int driverId)        {            using (var connection = CreateConnection())            {                connection.Open();                var scheduledActivities = connection.Query<ActivitySchedule>(@"                    SELECT                        ScheduleID,                        Date AS Date,                        ActivityName,                        StartTime,                        EndTime,                        VehicleID,                        DriverID,                        Notes,                        CalendarID                    FROM ActivitySchedule WHERE DriverID = @DriverID",                    new { DriverID = driverId }).AsList();                return scheduledActivities;            }        }        public List<ActivitySchedule> GetScheduledActivitiesByBus(int busId)        {            using (var connection = CreateConnection())            {                connection.Open();                var scheduledActivities = connection.Query<ActivitySchedule>(@"                    SELECT                        ScheduleID,                        Date AS Date,                        ActivityName,                        StartTime,                        EndTime,                        VehicleID,                        DriverID,                        Notes,                        CalendarID                    FROM ActivitySchedule WHERE VehicleID = @BusId",                    new { BusId = busId }).AsList();                return scheduledActivities;            }        }        public List<ActivitySchedule> GetScheduledActivitiesByTripType(string activityName)        {            using (var connection = CreateConnection())            {                connection.Open();                var scheduledActivities = connection.Query<ActivitySchedule>(@"                    SELECT                        ScheduleID,                        Date AS Date,                        ActivityName,                        StartTime,                        EndTime,                        VehicleID,                        DriverID,                        Notes,                        CalendarID                    FROM ActivitySchedule WHERE ActivityName = @ActivityName",                    new { ActivityName = activityName }).AsList();                return scheduledActivities;            }        }        public int AddScheduledActivity(ActivitySchedule scheduledActivity)        {            using (var connection = CreateConnection())            {                connection.Open();                var sql = @"                    INSERT INTO ActivitySchedule (                        Date, ActivityName, StartTime, EndTime, VehicleID, DriverID, Notes, CalendarID                    )                    VALUES (                        @Date, @ActivityName, @StartTime, @EndTime, @VehicleID, @DriverID, @Notes, @CalendarID                    );                    SELECT CAST(SCOPE_IDENTITY() as int);";                return connection.QuerySingle<int>(sql, scheduledActivity);            }        }        public bool UpdateScheduledActivity(ActivitySchedule scheduledActivity)        {            using (var connection = CreateConnection())            {                connection.Open();                var sql = @"                    UPDATE ActivitySchedule                    SET Date = @Date,                        ActivityName = @ActivityName,                        StartTime = @StartTime,                        EndTime = @EndTime,                        VehicleID = @VehicleID,                        DriverID = @DriverID,                        Notes = @Notes,                        CalendarID = @CalendarID                    WHERE ScheduleID = @ScheduleID";                var rowsAffected = connection.Execute(sql, scheduledActivity);                return rowsAffected > 0;            }        }        public bool DeleteScheduledActivity(int id)        {            using (var connection = CreateConnection())            {                connection.Open();                var sql = "DELETE FROM ActivitySchedule WHERE ScheduleID = @ScheduleID";                var rowsAffected = connection.Execute(sql, new { ScheduleID = id });                return rowsAffected > 0;            }        }    }}

